
maostm32Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b84  08006b84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006b84  08006b84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b84  08006b84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b84  08006b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000070  08006bfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08006bfc  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c90  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cc  00000000  00000000  00030d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00034190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb3  00000000  00000000  00034f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114ce  00000000  00000000  0004defb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8fa  00000000  00000000  0005f3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eacc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044cc  00000000  00000000  000ead14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080069b0 	.word	0x080069b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080069b0 	.word	0x080069b0

0800014c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
*/
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f004 fb96 	bl	800488e <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000f4 	.word	0x200000f4

08000170 <exec_i2c_cmd>:
_Bool exec_i2c_cmd(uint8_t *cmd_buff)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	_Bool rslt=true;
 8000178:	2301      	movs	r3, #1
 800017a:	73fb      	strb	r3, [r7, #15]
	//float val;
	//uint16_t errorCode=0;
	i2c_rmsg[0]=0x7;
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <exec_i2c_cmd+0x44>)
 800017e:	2207      	movs	r2, #7
 8000180:	701a      	strb	r2, [r3, #0]
	i2c_rmsg[1]=0x7;
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <exec_i2c_cmd+0x44>)
 8000184:	2207      	movs	r2, #7
 8000186:	705a      	strb	r2, [r3, #1]
	i2c_rmsg[2]=0x7;
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <exec_i2c_cmd+0x44>)
 800018a:	2207      	movs	r2, #7
 800018c:	709a      	strb	r2, [r3, #2]
    if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)i2c_rmsg, sizeof(i2c_rmsg),1000)==HAL_OK)
 800018e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000192:	2203      	movs	r2, #3
 8000194:	4907      	ldr	r1, [pc, #28]	; (80001b4 <exec_i2c_cmd+0x44>)
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <exec_i2c_cmd+0x48>)
 8000198:	f001 fc64 	bl	8001a64 <HAL_I2C_Slave_Transmit>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d002      	beq.n	80001a8 <exec_i2c_cmd+0x38>
    {
        // printf("Status code %02x,%02x%02x  OK\r\n",res_msg[0],res_msg[1],res_msg[2]);
    }
    else
    {
        printf("Send Response fail!\r\n");
 80001a2:	4806      	ldr	r0, [pc, #24]	; (80001bc <exec_i2c_cmd+0x4c>)
 80001a4:	f005 fc78 	bl	8005a98 <puts>
    }

    return rslt;
 80001a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3710      	adds	r7, #16
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000500 	.word	0x20000500
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	080069c8 	.word	0x080069c8

080001c0 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart,uint16_t Size)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	460b      	mov	r3, r1
 80001ca:	807b      	strh	r3, [r7, #2]
//        //memcpy(MainBuf,RxBuf,Size);
//        HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
//        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
//        //HAL_UART_Transmit(&huart2,MainBuf,Size,10);
//    }
    if(huart->Instance==USART1)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <HAL_UARTEx_RxEventCallback+0x48>)
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d113      	bne.n	80001fe <HAL_UARTEx_RxEventCallback+0x3e>
    {

    	 HAL_UART_Transmit(&huart1,RxBuf,RxBuf_SIZE,HAL_MAX_DELAY);
 80001d6:	f04f 33ff 	mov.w	r3, #4294967295
 80001da:	2214      	movs	r2, #20
 80001dc:	490b      	ldr	r1, [pc, #44]	; (800020c <HAL_UARTEx_RxEventCallback+0x4c>)
 80001de:	480c      	ldr	r0, [pc, #48]	; (8000210 <HAL_UARTEx_RxEventCallback+0x50>)
 80001e0:	f004 fb55 	bl	800488e <HAL_UART_Transmit>
    	 HAL_UARTEx_ReceiveToIdle_DMA(&huart1,RxBuf,RxBuf_SIZE);
 80001e4:	2214      	movs	r2, #20
 80001e6:	4909      	ldr	r1, [pc, #36]	; (800020c <HAL_UARTEx_RxEventCallback+0x4c>)
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <HAL_UARTEx_RxEventCallback+0x50>)
 80001ea:	f004 fbd3 	bl	8004994 <HAL_UARTEx_ReceiveToIdle_DMA>
    	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <HAL_UARTEx_RxEventCallback+0x54>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <HAL_UARTEx_RxEventCallback+0x54>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f022 0204 	bic.w	r2, r2, #4
 80001fc:	601a      	str	r2, [r3, #0]
    }

}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40013800 	.word	0x40013800
 800020c:	200004e4 	.word	0x200004e4
 8000210:	200000f4 	.word	0x200000f4
 8000214:	2000013c 	.word	0x2000013c

08000218 <HAL_I2C_SlaveTxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Tx transfer, and
  *         you can add your own implementation.
  * @retval None
*/
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
 800021e:	6078      	str	r0, [r7, #4]
	printf("cbak tx  buffer 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
			aTxBuffer[0],
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000222:	781b      	ldrb	r3, [r3, #0]
	printf("cbak tx  buffer 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 8000224:	4619      	mov	r1, r3
			aTxBuffer[1],
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000228:	785b      	ldrb	r3, [r3, #1]
	printf("cbak tx  buffer 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 800022a:	461a      	mov	r2, r3
			aTxBuffer[2],
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 800022e:	789b      	ldrb	r3, [r3, #2]
	printf("cbak tx  buffer 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 8000230:	4618      	mov	r0, r3
			aTxBuffer[3]);
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000234:	78db      	ldrb	r3, [r3, #3]
	printf("cbak tx  buffer 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	4603      	mov	r3, r0
 800023a:	4812      	ldr	r0, [pc, #72]	; (8000284 <HAL_I2C_SlaveTxCpltCallback+0x6c>)
 800023c:	f005 fba6 	bl	800598c <iprintf>
	Xfer_Complete = 1;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <HAL_I2C_SlaveTxCpltCallback+0x70>)
 8000242:	2201      	movs	r2, #1
 8000244:	601a      	str	r2, [r3, #0]
	aTxBuffer[0]++;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	3301      	adds	r3, #1
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000250:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1]++;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000254:	785b      	ldrb	r3, [r3, #1]
 8000256:	3301      	adds	r3, #1
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 800025c:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2]++;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	3301      	adds	r3, #1
 8000264:	b2da      	uxtb	r2, r3
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000268:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3]++;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 800026c:	78db      	ldrb	r3, [r3, #3]
 800026e:	3301      	adds	r3, #1
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8000274:	70da      	strb	r2, [r3, #3]

}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200004e0 	.word	0x200004e0
 8000284:	080069e0 	.word	0x080069e0
 8000288:	20000470 	.word	0x20000470

0800028c <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
*/
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800028c:	b5b0      	push	{r4, r5, r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af04      	add	r7, sp, #16
 8000292:	6078      	str	r0, [r7, #4]
//	aRxBuffer[0]=0x00;
//	aRxBuffer[1]=0x00;
//	aRxBuffer[2]=0x00;
//	aRxBuffer[3]=0x00;
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
			i2c_cmdline[0],
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 8000298:	4618      	mov	r0, r3
			i2c_cmdline[1],
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 800029c:	785b      	ldrb	r3, [r3, #1]
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 800029e:	461c      	mov	r4, r3
			i2c_cmdline[2],
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80002a2:	789b      	ldrb	r3, [r3, #2]
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 80002a4:	461d      	mov	r5, r3
			i2c_cmdline[3],
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80002a8:	78db      	ldrb	r3, [r3, #3]
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 80002aa:	461a      	mov	r2, r3
			i2c_cmdline[4],
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80002ae:	791b      	ldrb	r3, [r3, #4]
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 80002b0:	4619      	mov	r1, r3
			i2c_cmdline[5]);
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80002b4:	795b      	ldrb	r3, [r3, #5]
	printf("rcv rx buffer 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n",
 80002b6:	9302      	str	r3, [sp, #8]
 80002b8:	9101      	str	r1, [sp, #4]
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	462b      	mov	r3, r5
 80002be:	4622      	mov	r2, r4
 80002c0:	4601      	mov	r1, r0
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80002c4:	f005 fb62 	bl	800598c <iprintf>
	I2C_cmd_cplt=true;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bdb0      	pop	{r4, r5, r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200004f8 	.word	0x200004f8
 80002dc:	08006a10 	.word	0x08006a10
 80002e0:	20000475 	.word	0x20000475

080002e4 <HAL_I2C_AddrCallback>:
  *   TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  *   AddrMatchCode: Address Match Code
  * @retval None
*/
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
 80002f0:	4613      	mov	r3, r2
 80002f2:	803b      	strh	r3, [r7, #0]
//		printf("HAL_I2C_Slave_Seq_Receive_IT was set \r\n");
//
//	}
//	getMasterInput = 1;
//	getTransferDirection = TransferDirection;
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
	...

08000300 <HAL_I2C_ListenCpltCallback>:
  *   hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
*/
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	printf("ListenCpltCallback\r\n");
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <HAL_I2C_ListenCpltCallback+0x1c>)
 800030a:	f005 fbc5 	bl	8005a98 <puts>
	Xfer_Complete = 1;//123321
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <HAL_I2C_ListenCpltCallback+0x20>)
 8000310:	2201      	movs	r2, #1
 8000312:	601a      	str	r2, [r3, #0]

}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	08006a4c 	.word	0x08006a4c
 8000320:	20000470 	.word	0x20000470

08000324 <HAL_I2C_ErrorCallback>:
  *         add your own implementation.
  * @retval None
*/

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	/** Error_Handler() function is called when error occurs.
	* 1- When Slave doesn't acknowledge its address, Master restarts communication.
	* 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
	*/
	printf("I2C_ErrorCallback..\r\n");
 800032c:	480f      	ldr	r0, [pc, #60]	; (800036c <HAL_I2C_ErrorCallback+0x48>)
 800032e:	f005 fbb3 	bl	8005a98 <puts>
	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f001 ff67 	bl	8002206 <HAL_I2C_GetError>
 8000338:	4603      	mov	r3, r0
 800033a:	2b04      	cmp	r3, #4
 800033c:	d004      	beq.n	8000348 <HAL_I2C_ErrorCallback+0x24>
	{
		printf("I2C rub Error_hdl\r\n");
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <HAL_I2C_ErrorCallback+0x4c>)
 8000340:	f005 fbaa 	bl	8005a98 <puts>
		Error_Handler();
 8000344:	f000 f9f6 	bl	8000734 <Error_Handler>
	}
	//restart i2c irq
	if(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)i2c_cmdline, sizeof(i2c_cmdline)) != HAL_OK)  //I2C Slave Read
 8000348:	2206      	movs	r2, #6
 800034a:	490a      	ldr	r1, [pc, #40]	; (8000374 <HAL_I2C_ErrorCallback+0x50>)
 800034c:	480a      	ldr	r0, [pc, #40]	; (8000378 <HAL_I2C_ErrorCallback+0x54>)
 800034e:	f001 fc9f 	bl	8001c90 <HAL_I2C_Slave_Receive_IT>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d004      	beq.n	8000362 <HAL_I2C_ErrorCallback+0x3e>
	{
	  // Transfer error in reception process
	  printf("Slave Received_IT Fail\r\n");
 8000358:	4808      	ldr	r0, [pc, #32]	; (800037c <HAL_I2C_ErrorCallback+0x58>)
 800035a:	f005 fb9d 	bl	8005a98 <puts>
	  Error_Handler();
 800035e:	f000 f9e9 	bl	8000734 <Error_Handler>
	}
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	08006a60 	.word	0x08006a60
 8000370:	08006a78 	.word	0x08006a78
 8000374:	200004f8 	.word	0x200004f8
 8000378:	2000008c 	.word	0x2000008c
 800037c:	08006a8c 	.word	0x08006a8c

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 fc38 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f86a 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f000 f97c 	bl	8000688 <MX_GPIO_Init>
  MX_RTC_Init();
 8000390:	f000 f8f4 	bl	800057c <MX_RTC_Init>
  MX_USB_PCD_Init();
 8000394:	f000 f938 	bl	8000608 <MX_USB_PCD_Init>
  MX_DMA_Init();
 8000398:	f000 f958 	bl	800064c <MX_DMA_Init>
  MX_I2C1_Init();
 800039c:	f000 f8c0 	bl	8000520 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80003a0:	f000 f908 	bl	80005b4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(500);
 80003a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a8:	f000 fc88 	bl	8000cbc <HAL_Delay>
  HAL_UART_Transmit(&huart1,(uint8_t *)"OK>\r\n",3,100);
 80003ac:	2364      	movs	r3, #100	; 0x64
 80003ae:	2203      	movs	r2, #3
 80003b0:	4920      	ldr	r1, [pc, #128]	; (8000434 <main+0xb4>)
 80003b2:	4821      	ldr	r0, [pc, #132]	; (8000438 <main+0xb8>)
 80003b4:	f004 fa6b 	bl	800488e <HAL_UART_Transmit>
  //UART DMA Receive
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,RxBuf,sizeof(RxBuf));
 80003b8:	2214      	movs	r2, #20
 80003ba:	4920      	ldr	r1, [pc, #128]	; (800043c <main+0xbc>)
 80003bc:	481e      	ldr	r0, [pc, #120]	; (8000438 <main+0xb8>)
 80003be:	f004 fae9 	bl	8004994 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <main+0xc0>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <main+0xc0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f022 0204 	bic.w	r2, r2, #4
 80003d0:	601a      	str	r2, [r3, #0]
  // HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,PIN_LOW); //test pin of I2C exec time

  //HAL_UART_Receive_IT(&huart2,&rx_char,sizeof(rx_char));
  if(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)i2c_cmdline, sizeof(i2c_cmdline)) != HAL_OK)  //I2C Slave Read
 80003d2:	2206      	movs	r2, #6
 80003d4:	491b      	ldr	r1, [pc, #108]	; (8000444 <main+0xc4>)
 80003d6:	481c      	ldr	r0, [pc, #112]	; (8000448 <main+0xc8>)
 80003d8:	f001 fc5a 	bl	8001c90 <HAL_I2C_Slave_Receive_IT>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d004      	beq.n	80003ec <main+0x6c>
  {
	  /* Transfer error in reception process */
	  printf("Slave Received_IT Fail\r\n");
 80003e2:	481a      	ldr	r0, [pc, #104]	; (800044c <main+0xcc>)
 80003e4:	f005 fb58 	bl	8005a98 <puts>
	  //errFlag=1;
	  Error_Handler();
 80003e8:	f000 f9a4 	bl	8000734 <Error_Handler>
  }
  while (1)
  {
	  if (cmd_cplt)
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <main+0xd0>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d006      	beq.n	8000402 <main+0x82>
	  {
		  //__HAL_UART_DISABLE_IT(&huart2,UART_IT_RXNE);
		  strcpy((char *)cmd_buff,(char *)rx_buff);
 80003f4:	4917      	ldr	r1, [pc, #92]	; (8000454 <main+0xd4>)
 80003f6:	4818      	ldr	r0, [pc, #96]	; (8000458 <main+0xd8>)
 80003f8:	f005 fb56 	bl	8005aa8 <strcpy>
		  //exec_uart_cmd(cmd_buff);
		  //rx_idx=0;
		  cmd_cplt=false;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <main+0xd0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
		  // printf(cmd_buff,"\n%s\r\n",cmd_buff);
		  //__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
	  }
	  if (I2C_cmd_cplt)
 8000402:	4b16      	ldr	r3, [pc, #88]	; (800045c <main+0xdc>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f0      	beq.n	80003ec <main+0x6c>
	  {
		  exec_i2c_cmd(i2c_cmdline);
 800040a:	480e      	ldr	r0, [pc, #56]	; (8000444 <main+0xc4>)
 800040c:	f7ff feb0 	bl	8000170 <exec_i2c_cmd>
		  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,PIN_LOW);

		  I2C_cmd_cplt=false;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <main+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
		  if(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)i2c_cmdline, sizeof(i2c_cmdline)) != HAL_OK)  //I2C Slave Read
 8000416:	2206      	movs	r2, #6
 8000418:	490a      	ldr	r1, [pc, #40]	; (8000444 <main+0xc4>)
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <main+0xc8>)
 800041c:	f001 fc38 	bl	8001c90 <HAL_I2C_Slave_Receive_IT>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0e2      	beq.n	80003ec <main+0x6c>
		  {
			  // Transfer error in reception process
			  printf("Slave Received_IT Fail\r\n");
 8000426:	4809      	ldr	r0, [pc, #36]	; (800044c <main+0xcc>)
 8000428:	f005 fb36 	bl	8005a98 <puts>
			  //errFlag=2;
			  Error_Handler();
 800042c:	f000 f982 	bl	8000734 <Error_Handler>
	  if (cmd_cplt)
 8000430:	e7dc      	b.n	80003ec <main+0x6c>
 8000432:	bf00      	nop
 8000434:	08006aa4 	.word	0x08006aa4
 8000438:	200000f4 	.word	0x200000f4
 800043c:	200004e4 	.word	0x200004e4
 8000440:	2000013c 	.word	0x2000013c
 8000444:	200004f8 	.word	0x200004f8
 8000448:	2000008c 	.word	0x2000008c
 800044c:	08006a8c 	.word	0x08006a8c
 8000450:	20000474 	.word	0x20000474
 8000454:	20000478 	.word	0x20000478
 8000458:	200004ac 	.word	0x200004ac
 800045c:	20000475 	.word	0x20000475

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b094      	sub	sp, #80	; 0x50
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f005 fa84 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000490:	2309      	movs	r3, #9
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049e:	2301      	movs	r3, #1
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a6:	2302      	movs	r3, #2
 80004a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fb12 	bl	8003ae4 <HAL_RCC_OscConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004c6:	f000 f935 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	230f      	movs	r3, #15
 80004cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 fd7e 	bl	8003fe8 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004f2:	f000 f91f 	bl	8000734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80004f6:	2311      	movs	r3, #17
 80004f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000500:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000504:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4618      	mov	r0, r3
 800050a:	f003 fefb 	bl	8004304 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000514:	f000 f90e 	bl	8000734 <Error_Handler>
  }
}
 8000518:	bf00      	nop
 800051a:	3750      	adds	r7, #80	; 0x50
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_I2C1_Init+0x50>)
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <MX_I2C1_Init+0x54>)
 8000528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_I2C1_Init+0x50>)
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <MX_I2C1_Init+0x58>)
 800052e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_I2C1_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_I2C1_Init+0x50>)
 8000538:	2224      	movs	r2, #36	; 0x24
 800053a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_I2C1_Init+0x50>)
 800053e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_I2C1_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_I2C1_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_I2C1_Init+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_I2C1_Init+0x50>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_I2C1_Init+0x50>)
 800055e:	f001 f929 	bl	80017b4 <HAL_I2C_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000568:	f000 f8e4 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000008c 	.word	0x2000008c
 8000574:	40005400 	.word	0x40005400
 8000578:	000186a0 	.word	0x000186a0

0800057c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_RTC_Init+0x30>)
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <MX_RTC_Init+0x34>)
 8000584:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_RTC_Init+0x30>)
 8000588:	f04f 32ff 	mov.w	r2, #4294967295
 800058c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_RTC_Init+0x30>)
 8000590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000594:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_RTC_Init+0x30>)
 8000598:	f004 f820 	bl	80045dc <HAL_RTC_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80005a2:	f000 f8c7 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000e0 	.word	0x200000e0
 80005b0:	40002800 	.word	0x40002800

080005b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_USART1_UART_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ec:	f004 f8ff 	bl	80047ee <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 f89d 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000f4 	.word	0x200000f4
 8000604:	40013800 	.word	0x40013800

08000608 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <MX_USB_PCD_Init+0x40>)
 8000610:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 8000614:	2208      	movs	r2, #8
 8000616:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 800061a:	2202      	movs	r2, #2
 800061c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_USB_PCD_Init+0x3c>)
 8000632:	f003 f94b 	bl	80038cc <HAL_PCD_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800063c:	f000 f87a 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000180 	.word	0x20000180
 8000648:	40005c00 	.word	0x40005c00

0800064c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_DMA_Init+0x38>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <MX_DMA_Init+0x38>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_DMA_Init+0x38>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	200f      	movs	r0, #15
 8000670:	f000 fc1f 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000674:	200f      	movs	r0, #15
 8000676:	f000 fc38 	bl	8000eea <HAL_NVIC_EnableIRQ>

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_GPIO_Init+0xa4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <MX_GPIO_Init+0xa4>)
 80006a2:	f043 0320 	orr.w	r3, r3, #32
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_GPIO_Init+0xa4>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0320 	and.w	r3, r3, #32
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_GPIO_Init+0xa4>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_GPIO_Init+0xa4>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_GPIO_Init+0xa4>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_GPIO_Init+0xa4>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <MX_GPIO_Init+0xa4>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_GPIO_Init+0xa4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	4811      	ldr	r0, [pc, #68]	; (8000730 <MX_GPIO_Init+0xa8>)
 80006ea:	f001 f84b 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0xa8>)
 8000702:	f000 febb 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_GPIO_Init+0xa8>)
 800071e:	f000 fead 	bl	800147c <HAL_GPIO_Init>

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	40010800 	.word	0x40010800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_MspInit+0x5c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <HAL_MspInit+0x5c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_MspInit+0x5c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x5c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x5c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x5c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_MspInit+0x60>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_MspInit+0x60>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010000 	.word	0x40010000

080007a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <HAL_I2C_MspInit+0x90>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d133      	bne.n	800082c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_I2C_MspInit+0x94>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <HAL_I2C_MspInit+0x94>)
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_I2C_MspInit+0x94>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007dc:	23c0      	movs	r3, #192	; 0xc0
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e0:	2312      	movs	r3, #18
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <HAL_I2C_MspInit+0x98>)
 80007f0:	f000 fe44 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_I2C_MspInit+0x94>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_I2C_MspInit+0x94>)
 80007fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_I2C_MspInit+0x94>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	201f      	movs	r0, #31
 8000812:	f000 fb4e 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000816:	201f      	movs	r0, #31
 8000818:	f000 fb67 	bl	8000eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2020      	movs	r0, #32
 8000822:	f000 fb46 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000826:	2020      	movs	r0, #32
 8000828:	f000 fb5f 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	40021000 	.word	0x40021000
 800083c:	40010c00 	.word	0x40010c00

08000840 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <HAL_RTC_MspInit+0x3c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d110      	bne.n	8000874 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000852:	f003 f93b 	bl	8003acc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_RTC_MspInit+0x40>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <HAL_RTC_MspInit+0x40>)
 800085c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_RTC_MspInit+0x40>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_RTC_MspInit+0x44>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40002800 	.word	0x40002800
 8000880:	40021000 	.word	0x40021000
 8000884:	4242043c 	.word	0x4242043c

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a33      	ldr	r2, [pc, #204]	; (8000970 <HAL_UART_MspInit+0xe8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d15f      	bne.n	8000968 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a8:	4b32      	ldr	r3, [pc, #200]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a31      	ldr	r2, [pc, #196]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <HAL_UART_MspInit+0xec>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	4822      	ldr	r0, [pc, #136]	; (8000978 <HAL_UART_MspInit+0xf0>)
 80008ee:	f000 fdc5 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	; (8000978 <HAL_UART_MspInit+0xf0>)
 8000908:	f000 fdb8 	bl	800147c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_UART_MspInit+0xf4>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <HAL_UART_MspInit+0xf8>)
 8000910:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_UART_MspInit+0xf4>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UART_MspInit+0xf4>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800093c:	480f      	ldr	r0, [pc, #60]	; (800097c <HAL_UART_MspInit+0xf4>)
 800093e:	f000 faef 	bl	8000f20 <HAL_DMA_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000948:	f7ff fef4 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000950:	63da      	str	r2, [r3, #60]	; 0x3c
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_UART_MspInit+0xf4>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f000 faa8 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000962:	2025      	movs	r0, #37	; 0x25
 8000964:	f000 fac1 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013800 	.word	0x40013800
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	2000013c 	.word	0x2000013c
 8000980:	40020058 	.word	0x40020058

08000984 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <HAL_PCD_MspInit+0x34>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10b      	bne.n	80009ae <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_PCD_MspInit+0x38>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_PCD_MspInit+0x38>)
 800099c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009a0:	61d3      	str	r3, [r2, #28]
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_PCD_MspInit+0x38>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40005c00 	.word	0x40005c00
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 f93d 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DMA1_Channel5_IRQHandler+0x10>)
 8000a16:	f000 fbf1 	bl	80011fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000013c 	.word	0x2000013c

08000a24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <I2C1_EV_IRQHandler+0x10>)
 8000a2a:	f001 f99f 	bl	8001d6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000008c 	.word	0x2000008c

08000a38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <I2C1_ER_IRQHandler+0x10>)
 8000a3e:	f001 fb06 	bl	800204e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000008c 	.word	0x2000008c

08000a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <USART1_IRQHandler+0x10>)
 8000a52:	f003 fffd 	bl	8004a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000f4 	.word	0x200000f4

08000a60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
	}

return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fb49 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
	}
	return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f004 fee0 	bl	8005928 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20005000 	.word	0x20005000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000504 	.word	0x20000504
 8000b9c:	20000520 	.word	0x20000520

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff fff8 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb2:	490c      	ldr	r1, [pc, #48]	; (8000be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc8:	4c09      	ldr	r4, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f004 fead 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fbd1 	bl	8000380 <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be8:	08006b8c 	.word	0x08006b8c
  ldr r2, =_sbss
 8000bec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf0:	2000051c 	.word	0x2000051c

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f947 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fd94 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f95f 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f927 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000508 	.word	0x20000508

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000508 	.word	0x20000508

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <__NVIC_EnableIRQ+0x34>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff90 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff2d 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff42 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff35 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e043      	b.n	8000fbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_DMA_Init+0xa8>)
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <HAL_DMA_Init+0xac>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	009a      	lsls	r2, r3, #2
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <HAL_DMA_Init+0xb0>)
 8000f52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	bffdfff8 	.word	0xbffdfff8
 8000fcc:	cccccccd 	.word	0xcccccccd
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_DMA_Start_IT+0x20>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e04b      	b.n	800108c <HAL_DMA_Start_IT+0xb8>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d13a      	bne.n	800107e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f9f8 	bl	8001422 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d008      	beq.n	800104c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 020e 	orr.w	r2, r2, #14
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e00f      	b.n	800106c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0204 	bic.w	r2, r2, #4
 800105a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 020a 	orr.w	r2, r2, #10
 800106a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e005      	b.n	800108a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001086:	2302      	movs	r3, #2
 8001088:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d008      	beq.n	80010be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e020      	b.n	8001100 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 020e 	bic.w	r2, r2, #14
 80010cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
	...

0800110c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d005      	beq.n	8001130 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2204      	movs	r2, #4
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e051      	b.n	80011d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 020e 	bic.w	r2, r2, #14
 800113e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_DMA_Abort_IT+0xd4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d029      	beq.n	80011ae <HAL_DMA_Abort_IT+0xa2>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_DMA_Abort_IT+0xd8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d022      	beq.n	80011aa <HAL_DMA_Abort_IT+0x9e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_DMA_Abort_IT+0xdc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01a      	beq.n	80011a4 <HAL_DMA_Abort_IT+0x98>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_DMA_Abort_IT+0xe0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d012      	beq.n	800119e <HAL_DMA_Abort_IT+0x92>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_DMA_Abort_IT+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00a      	beq.n	8001198 <HAL_DMA_Abort_IT+0x8c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_DMA_Abort_IT+0xe8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d102      	bne.n	8001192 <HAL_DMA_Abort_IT+0x86>
 800118c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001190:	e00e      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 8001192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001196:	e00b      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	e008      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	e005      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 80011a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a8:	e002      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 80011aa:	2310      	movs	r3, #16
 80011ac:	e000      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 80011ae:	2301      	movs	r3, #1
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_DMA_Abort_IT+0xec>)
 80011b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
    } 
  }
  return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020008 	.word	0x40020008
 80011e4:	4002001c 	.word	0x4002001c
 80011e8:	40020030 	.word	0x40020030
 80011ec:	40020044 	.word	0x40020044
 80011f0:	40020058 	.word	0x40020058
 80011f4:	4002006c 	.word	0x4002006c
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	2204      	movs	r2, #4
 800121a:	409a      	lsls	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d04f      	beq.n	80012c4 <HAL_DMA_IRQHandler+0xc8>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d04a      	beq.n	80012c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0204 	bic.w	r2, r2, #4
 800124a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_DMA_IRQHandler+0x1f0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d029      	beq.n	80012aa <HAL_DMA_IRQHandler+0xae>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_DMA_IRQHandler+0x1f4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d022      	beq.n	80012a6 <HAL_DMA_IRQHandler+0xaa>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01a      	beq.n	80012a0 <HAL_DMA_IRQHandler+0xa4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a62      	ldr	r2, [pc, #392]	; (80013f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d012      	beq.n	800129a <HAL_DMA_IRQHandler+0x9e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a60      	ldr	r2, [pc, #384]	; (80013fc <HAL_DMA_IRQHandler+0x200>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00a      	beq.n	8001294 <HAL_DMA_IRQHandler+0x98>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_DMA_IRQHandler+0x204>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d102      	bne.n	800128e <HAL_DMA_IRQHandler+0x92>
 8001288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128c:	e00e      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 800128e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001292:	e00b      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 8001294:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001298:	e008      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 800129a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129e:	e005      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 80012a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a4:	e002      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	e000      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 80012aa:	2304      	movs	r3, #4
 80012ac:	4a55      	ldr	r2, [pc, #340]	; (8001404 <HAL_DMA_IRQHandler+0x208>)
 80012ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8094 	beq.w	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	e08e      	b.n	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2202      	movs	r2, #2
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d056      	beq.n	8001382 <HAL_DMA_IRQHandler+0x186>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d051      	beq.n	8001382 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10b      	bne.n	8001304 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 020a 	bic.w	r2, r2, #10
 80012fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a38      	ldr	r2, [pc, #224]	; (80013ec <HAL_DMA_IRQHandler+0x1f0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d029      	beq.n	8001362 <HAL_DMA_IRQHandler+0x166>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d022      	beq.n	800135e <HAL_DMA_IRQHandler+0x162>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_DMA_IRQHandler+0x1f8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01a      	beq.n	8001358 <HAL_DMA_IRQHandler+0x15c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d012      	beq.n	8001352 <HAL_DMA_IRQHandler+0x156>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_DMA_IRQHandler+0x200>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00a      	beq.n	800134c <HAL_DMA_IRQHandler+0x150>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a31      	ldr	r2, [pc, #196]	; (8001400 <HAL_DMA_IRQHandler+0x204>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d102      	bne.n	8001346 <HAL_DMA_IRQHandler+0x14a>
 8001340:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001344:	e00e      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134a:	e00b      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 800134c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001350:	e008      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	e005      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	e002      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 800135e:	2320      	movs	r3, #32
 8001360:	e000      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001362:	2302      	movs	r3, #2
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_DMA_IRQHandler+0x208>)
 8001366:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d034      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001380:	e02f      	b.n	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2208      	movs	r2, #8
 8001388:	409a      	lsls	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d028      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x1e8>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020e 	bic.w	r2, r2, #14
 80013aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	4798      	blx	r3
    }
  }
  return;
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
}
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020008 	.word	0x40020008
 80013f0:	4002001c 	.word	0x4002001c
 80013f4:	40020030 	.word	0x40020030
 80013f8:	40020044 	.word	0x40020044
 80013fc:	40020058 	.word	0x40020058
 8001400:	4002006c 	.word	0x4002006c
 8001404:	40020000 	.word	0x40020000

08001408 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001416:	b2db      	uxtb	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f202 	lsl.w	r2, r1, r2
 800143e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b10      	cmp	r3, #16
 800144e:	d108      	bne.n	8001462 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001460:	e007      	b.n	8001472 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	60da      	str	r2, [r3, #12]
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e169      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001490:	2201      	movs	r2, #1
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8158 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a9a      	ldr	r2, [pc, #616]	; (800171c <HAL_GPIO_Init+0x2a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d05e      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014b8:	4a98      	ldr	r2, [pc, #608]	; (800171c <HAL_GPIO_Init+0x2a0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d875      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014be:	4a98      	ldr	r2, [pc, #608]	; (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d058      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014c4:	4a96      	ldr	r2, [pc, #600]	; (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d86f      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ca:	4a96      	ldr	r2, [pc, #600]	; (8001724 <HAL_GPIO_Init+0x2a8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d052      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014d0:	4a94      	ldr	r2, [pc, #592]	; (8001724 <HAL_GPIO_Init+0x2a8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d869      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014d6:	4a94      	ldr	r2, [pc, #592]	; (8001728 <HAL_GPIO_Init+0x2ac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04c      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014dc:	4a92      	ldr	r2, [pc, #584]	; (8001728 <HAL_GPIO_Init+0x2ac>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d863      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014e2:	4a92      	ldr	r2, [pc, #584]	; (800172c <HAL_GPIO_Init+0x2b0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d046      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014e8:	4a90      	ldr	r2, [pc, #576]	; (800172c <HAL_GPIO_Init+0x2b0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d85d      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d82a      	bhi.n	8001548 <HAL_GPIO_Init+0xcc>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d859      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <HAL_GPIO_Init+0x80>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001577 	.word	0x08001577
 8001500:	08001551 	.word	0x08001551
 8001504:	08001563 	.word	0x08001563
 8001508:	080015a5 	.word	0x080015a5
 800150c:	080015ab 	.word	0x080015ab
 8001510:	080015ab 	.word	0x080015ab
 8001514:	080015ab 	.word	0x080015ab
 8001518:	080015ab 	.word	0x080015ab
 800151c:	080015ab 	.word	0x080015ab
 8001520:	080015ab 	.word	0x080015ab
 8001524:	080015ab 	.word	0x080015ab
 8001528:	080015ab 	.word	0x080015ab
 800152c:	080015ab 	.word	0x080015ab
 8001530:	080015ab 	.word	0x080015ab
 8001534:	080015ab 	.word	0x080015ab
 8001538:	080015ab 	.word	0x080015ab
 800153c:	080015ab 	.word	0x080015ab
 8001540:	08001559 	.word	0x08001559
 8001544:	0800156d 	.word	0x0800156d
 8001548:	4a79      	ldr	r2, [pc, #484]	; (8001730 <HAL_GPIO_Init+0x2b4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154e:	e02c      	b.n	80015aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e029      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e024      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	3308      	adds	r3, #8
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e01f      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	330c      	adds	r3, #12
 8001572:	623b      	str	r3, [r7, #32]
          break;
 8001574:	e01a      	b.n	80015ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157e:	2304      	movs	r3, #4
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e013      	b.n	80015ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	611a      	str	r2, [r3, #16]
          break;
 8001596:	e009      	b.n	80015ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	615a      	str	r2, [r3, #20]
          break;
 80015a2:	e003      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x130>
          break;
 80015aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	; 0xff
 80015b0:	d801      	bhi.n	80015b6 <HAL_GPIO_Init+0x13a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_Init+0x13e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2bff      	cmp	r3, #255	; 0xff
 80015c0:	d802      	bhi.n	80015c8 <HAL_GPIO_Init+0x14c>
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x152>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	3b08      	subs	r3, #8
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	210f      	movs	r1, #15
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80b1 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015fc:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <HAL_GPIO_Init+0x2b8>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <HAL_GPIO_Init+0x2b8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_GPIO_Init+0x2bc>)
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a40      	ldr	r2, [pc, #256]	; (800173c <HAL_GPIO_Init+0x2c0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1ec>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3f      	ldr	r2, [pc, #252]	; (8001740 <HAL_GPIO_Init+0x2c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3e      	ldr	r2, [pc, #248]	; (8001744 <HAL_GPIO_Init+0x2c8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3d      	ldr	r2, [pc, #244]	; (8001748 <HAL_GPIO_Init+0x2cc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1e0>
 8001658:	2303      	movs	r3, #3
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 800165c:	2304      	movs	r3, #4
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001668:	2300      	movs	r3, #0
 800166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167a:	492f      	ldr	r1, [pc, #188]	; (8001738 <HAL_GPIO_Init+0x2bc>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_GPIO_Init+0x2d0>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	492c      	ldr	r1, [pc, #176]	; (800174c <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4928      	ldr	r1, [pc, #160]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4922      	ldr	r1, [pc, #136]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	491e      	ldr	r1, [pc, #120]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4918      	ldr	r1, [pc, #96]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4914      	ldr	r1, [pc, #80]	; (800174c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d021      	beq.n	8001750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_GPIO_Init+0x2d0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e021      	b.n	800175e <HAL_GPIO_Init+0x2e2>
 800171a:	bf00      	nop
 800171c:	10320000 	.word	0x10320000
 8001720:	10310000 	.word	0x10310000
 8001724:	10220000 	.word	0x10220000
 8001728:	10210000 	.word	0x10210000
 800172c:	10120000 	.word	0x10120000
 8001730:	10110000 	.word	0x10110000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	43db      	mvns	r3, r3
 8001758:	4909      	ldr	r1, [pc, #36]	; (8001780 <HAL_GPIO_Init+0x304>)
 800175a:	4013      	ands	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	f47f ae8e 	bne.w	8001490 <HAL_GPIO_Init+0x14>
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	372c      	adds	r7, #44	; 0x2c
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e12b      	b.n	8001a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe ffe2 	bl	80007a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2224      	movs	r2, #36	; 0x24
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001818:	f002 fd2e 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a81      	ldr	r2, [pc, #516]	; (8001a28 <HAL_I2C_Init+0x274>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d807      	bhi.n	8001838 <HAL_I2C_Init+0x84>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a80      	ldr	r2, [pc, #512]	; (8001a2c <HAL_I2C_Init+0x278>)
 800182c:	4293      	cmp	r3, r2
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e006      	b.n	8001846 <HAL_I2C_Init+0x92>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a7d      	ldr	r2, [pc, #500]	; (8001a30 <HAL_I2C_Init+0x27c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0e7      	b.n	8001a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a78      	ldr	r2, [pc, #480]	; (8001a34 <HAL_I2C_Init+0x280>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_I2C_Init+0x274>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d802      	bhi.n	8001888 <HAL_I2C_Init+0xd4>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	e009      	b.n	800189c <HAL_I2C_Init+0xe8>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <HAL_I2C_Init+0x284>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	495c      	ldr	r1, [pc, #368]	; (8001a28 <HAL_I2C_Init+0x274>)
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d819      	bhi.n	80018f0 <HAL_I2C_Init+0x13c>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e59      	subs	r1, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018d0:	400b      	ands	r3, r1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_I2C_Init+0x138>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e59      	subs	r1, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	e051      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 80018ec:	2304      	movs	r3, #4
 80018ee:	e04f      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_I2C_Init+0x168>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e58      	subs	r0, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e012      	b.n	8001942 <HAL_I2C_Init+0x18e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	0099      	lsls	r1, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001932:	3301      	adds	r3, #1
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Init+0x196>
 8001946:	2301      	movs	r3, #1
 8001948:	e022      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10e      	bne.n	8001970 <HAL_I2C_Init+0x1bc>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1e58      	subs	r0, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	fbb0 f3f3 	udiv	r3, r0, r3
 8001964:	3301      	adds	r3, #1
 8001966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196e:	e00f      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	0099      	lsls	r1, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	fbb0 f3f3 	udiv	r3, r0, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	6809      	ldr	r1, [r1, #0]
 8001994:	4313      	orrs	r3, r2
 8001996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6911      	ldr	r1, [r2, #16]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68d2      	ldr	r2, [r2, #12]
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	000186a0 	.word	0x000186a0
 8001a2c:	001e847f 	.word	0x001e847f
 8001a30:	003d08ff 	.word	0x003d08ff
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	10624dd3 	.word	0x10624dd3

08001a3c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d103      	bne.n	8001a5a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff f918 	bl	8000ca8 <HAL_GetTick>
 8001a78:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	f040 80fb 	bne.w	8001c7e <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_I2C_Slave_Transmit+0x30>
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0f3      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Slave_Transmit+0x42>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e0ec      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d007      	beq.n	8001acc <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2221      	movs	r2, #33	; 0x21
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a5f      	ldr	r2, [pc, #380]	; (8001c88 <HAL_I2C_Slave_Transmit+0x224>)
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2200      	movs	r2, #0
 8001b26:	4959      	ldr	r1, [pc, #356]	; (8001c8c <HAL_I2C_Slave_Transmit+0x228>)
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f001 fd93 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0a3      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b56:	d165      	bne.n	8001c24 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	494a      	ldr	r1, [pc, #296]	; (8001c8c <HAL_I2C_Slave_Transmit+0x228>)
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f001 fd76 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e086      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b88:	e04c      	b.n	8001c24 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f001 fdda 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba8:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e068      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d11b      	bne.n	8001c24 <HAL_I2C_Slave_Transmit+0x1c0>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ae      	bne.n	8001b8a <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f001 fd0b 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e01b      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c50:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	ffff0000 	.word	0xffff0000
 8001c8c:	00010002 	.word	0x00010002

08001c90 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d158      	bne.n	8001d5c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_I2C_Slave_Receive_IT+0x26>
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e051      	b.n	8001d5e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2C_Slave_Receive_IT+0x38>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e04a      	b.n	8001d5e <HAL_I2C_Slave_Receive_IT+0xce>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d007      	beq.n	8001cee <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2222      	movs	r2, #34	; 0x22
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_I2C_Slave_Receive_IT+0xd8>)
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d56:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	ffff0000 	.word	0xffff0000

08001d6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d003      	beq.n	8001da4 <HAL_I2C_EV_IRQHandler+0x38>
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	f040 80c1 	bne.w	8001f26 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_I2C_EV_IRQHandler+0x6e>
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001dc4:	d003      	beq.n	8001dce <HAL_I2C_EV_IRQHandler+0x62>
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_EV_IRQHandler+0x66>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x68>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f000 8132 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00c      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0x92>
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	0a5b      	lsrs	r3, r3, #9
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f001 fd51 	bl	8003898 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fd5f 	bl	80028ba <I2C_Master_SB>
 8001dfc:	e092      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_I2C_EV_IRQHandler+0xb2>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fdd4 	bl	80029c4 <I2C_Master_ADD10>
 8001e1c:	e082      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_I2C_EV_IRQHandler+0xd2>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	0a5b      	lsrs	r3, r3, #9
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fded 	bl	8002a16 <I2C_Master_ADDR>
 8001e3c:	e072      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03b      	beq.n	8001ec2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e58:	f000 80f3 	beq.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	09db      	lsrs	r3, r3, #7
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d103      	bne.n	8001e88 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f9cb 	bl	800221c <I2C_MasterTransmit_TXE>
 8001e86:	e04d      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80d6 	beq.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	0a5b      	lsrs	r3, r3, #9
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80cf 	beq.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	2b21      	cmp	r3, #33	; 0x21
 8001ea8:	d103      	bne.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fa52 	bl	8002354 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb0:	e0c7      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	f040 80c4 	bne.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fac0 	bl	8002440 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec0:	e0bf      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed0:	f000 80b7 	beq.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00f      	beq.n	8001f00 <HAL_I2C_EV_IRQHandler+0x194>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <HAL_I2C_EV_IRQHandler+0x194>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb39 	bl	8002570 <I2C_MasterReceive_RXNE>
 8001efe:	e011      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 809a 	beq.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	0a5b      	lsrs	r3, r3, #9
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8093 	beq.w	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fbe2 	bl	80026e6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f22:	e08e      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f24:	e08d      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e007      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x20e>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00c      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 ffa6 	bl	8002ec4 <I2C_Slave_ADDR>
 8001f78:	e066      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_I2C_EV_IRQHandler+0x22e>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	0a5b      	lsrs	r3, r3, #9
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 ffe0 	bl	8002f58 <I2C_Slave_STOPF>
 8001f98:	e056      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	2b21      	cmp	r3, #33	; 0x21
 8001f9e:	d002      	beq.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x23a>
 8001fa0:	7bbb      	ldrb	r3, [r7, #14]
 8001fa2:	2b29      	cmp	r3, #41	; 0x29
 8001fa4:	d125      	bne.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	09db      	lsrs	r3, r3, #7
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00f      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x266>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	0a9b      	lsrs	r3, r3, #10
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x266>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 febe 	bl	8002d4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fd0:	e039      	b.n	8002046 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d033      	beq.n	8002046 <HAL_I2C_EV_IRQHandler+0x2da>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	0a5b      	lsrs	r3, r3, #9
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d02d      	beq.n	8002046 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 feeb 	bl	8002dc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff0:	e029      	b.n	8002046 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00f      	beq.n	800201e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	0a9b      	lsrs	r3, r3, #10
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_I2C_EV_IRQHandler+0x2b2>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fef5 	bl	8002e06 <I2C_SlaveReceive_RXNE>
 800201c:	e014      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00e      	beq.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	0a5b      	lsrs	r3, r3, #9
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 ff23 	bl	8002e82 <I2C_SlaveReceive_BTF>
 800203c:	e004      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800203e:	bf00      	nop
 8002040:	e002      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002042:	bf00      	nop
 8002044:	e000      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002046:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b08a      	sub	sp, #40	; 0x28
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002070:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_I2C_ER_IRQHandler+0x5e>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d010      	beq.n	80020ac <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800209a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	0a5b      	lsrs	r3, r3, #9
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00e      	beq.n	80020d6 <HAL_I2C_ER_IRQHandler+0x88>
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80020d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	0a9b      	lsrs	r3, r3, #10
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03f      	beq.n	8002162 <HAL_I2C_ER_IRQHandler+0x114>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d039      	beq.n	8002162 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80020ee:	7efb      	ldrb	r3, [r7, #27]
 80020f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002108:	7ebb      	ldrb	r3, [r7, #26]
 800210a:	2b20      	cmp	r3, #32
 800210c:	d112      	bne.n	8002134 <HAL_I2C_ER_IRQHandler+0xe6>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <HAL_I2C_ER_IRQHandler+0xe6>
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b21      	cmp	r3, #33	; 0x21
 8002118:	d008      	beq.n	800212c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	2b29      	cmp	r3, #41	; 0x29
 800211e:	d005      	beq.n	800212c <HAL_I2C_ER_IRQHandler+0xde>
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b28      	cmp	r3, #40	; 0x28
 8002124:	d106      	bne.n	8002134 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b21      	cmp	r3, #33	; 0x21
 800212a:	d103      	bne.n	8002134 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f001 f843 	bl	80031b8 <I2C_Slave_AF>
 8002132:	e016      	b.n	8002162 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800213c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002146:	7efb      	ldrb	r3, [r7, #27]
 8002148:	2b10      	cmp	r3, #16
 800214a:	d002      	beq.n	8002152 <HAL_I2C_ER_IRQHandler+0x104>
 800214c:	7efb      	ldrb	r3, [r7, #27]
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d107      	bne.n	8002162 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	0adb      	lsrs	r3, r3, #11
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <HAL_I2C_ER_IRQHandler+0x13e>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800218a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f001 f87e 	bl	80032a0 <I2C_ITError>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002232:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d150      	bne.n	80022e4 <I2C_MasterTransmit_TXE+0xc8>
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2b21      	cmp	r3, #33	; 0x21
 8002246:	d14d      	bne.n	80022e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d01d      	beq.n	800228a <I2C_MasterTransmit_TXE+0x6e>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b20      	cmp	r3, #32
 8002252:	d01a      	beq.n	800228a <I2C_MasterTransmit_TXE+0x6e>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800225a:	d016      	beq.n	800228a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800226a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2211      	movs	r2, #17
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff92 	bl	80021ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002288:	e060      	b.n	800234c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002298:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d107      	bne.n	80022d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff7f 	bl	80021d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022d2:	e03b      	b.n	800234c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff65 	bl	80021ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022e2:	e033      	b.n	800234c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b21      	cmp	r3, #33	; 0x21
 80022e8:	d005      	beq.n	80022f6 <I2C_MasterTransmit_TXE+0xda>
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d12d      	bne.n	800234c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b22      	cmp	r3, #34	; 0x22
 80022f4:	d12a      	bne.n	800234c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002310:	e01c      	b.n	800234c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d103      	bne.n	8002326 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f88e 	bl	8002440 <I2C_MemoryTransmit_TXE_BTF>
}
 8002324:	e012      	b.n	800234c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800234a:	e7ff      	b.n	800234c <I2C_MasterTransmit_TXE+0x130>
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b21      	cmp	r3, #33	; 0x21
 800236c:	d164      	bne.n	8002438 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800239c:	e04c      	b.n	8002438 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d01d      	beq.n	80023e0 <I2C_MasterTransmit_BTF+0x8c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d01a      	beq.n	80023e0 <I2C_MasterTransmit_BTF+0x8c>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b0:	d016      	beq.n	80023e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2211      	movs	r2, #17
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fee7 	bl	80021ac <HAL_I2C_MasterTxCpltCallback>
}
 80023de:	e02b      	b.n	8002438 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d107      	bne.n	800242a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fed4 	bl	80021d0 <HAL_I2C_MemTxCpltCallback>
}
 8002428:	e006      	b.n	8002438 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff feba 	bl	80021ac <HAL_I2C_MasterTxCpltCallback>
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002454:	2b00      	cmp	r3, #0
 8002456:	d11d      	bne.n	8002494 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10b      	bne.n	8002478 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	1c9a      	adds	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002476:	e077      	b.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	b29b      	uxth	r3, r3
 800247e:	121b      	asrs	r3, r3, #8
 8002480:	b2da      	uxtb	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002492:	e069      	b.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10b      	bne.n	80024b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024b2:	e059      	b.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d152      	bne.n	8002562 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b22      	cmp	r3, #34	; 0x22
 80024c0:	d10d      	bne.n	80024de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024dc:	e044      	b.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b21      	cmp	r3, #33	; 0x21
 80024ec:	d112      	bne.n	8002514 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002512:	e029      	b.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d124      	bne.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b21      	cmp	r3, #33	; 0x21
 8002522:	d121      	bne.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002532:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002542:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fe38 	bl	80021d0 <HAL_I2C_MemTxCpltCallback>
}
 8002560:	e002      	b.n	8002568 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fa6a 	bl	8001a3c <I2C_Flush_DR>
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b22      	cmp	r3, #34	; 0x22
 8002582:	f040 80ac 	bne.w	80026de <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d921      	bls.n	80025d8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	f040 808c 	bne.w	80026de <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80025d6:	e082      	b.n	80026de <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d075      	beq.n	80026cc <I2C_MasterReceive_RXNE+0x15c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d002      	beq.n	80025ec <I2C_MasterReceive_RXNE+0x7c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d16f      	bne.n	80026cc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f001 f8f3 	bl	80037d8 <I2C_WaitOnSTOPRequestThroughIT>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d142      	bne.n	800267e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002606:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002616:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d10a      	bne.n	8002668 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fdbe 	bl	80021e2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002666:	e03a      	b.n	80026de <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2212      	movs	r2, #18
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fda1 	bl	80021be <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800267c:	e02f      	b.n	80026de <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800268c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7fd fe2d 	bl	8000324 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026ca:	e008      	b.n	80026de <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	605a      	str	r2, [r3, #4]
}
 80026dc:	e7ff      	b.n	80026de <I2C_MasterReceive_RXNE+0x16e>
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d11b      	bne.n	8002736 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002734:	e0bd      	b.n	80028b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b03      	cmp	r3, #3
 800273e:	d129      	bne.n	8002794 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b04      	cmp	r3, #4
 8002754:	d00a      	beq.n	800276c <I2C_MasterReceive_BTF+0x86>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d007      	beq.n	800276c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002792:	e08e      	b.n	80028b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d176      	bne.n	800288c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d002      	beq.n	80027aa <I2C_MasterReceive_BTF+0xc4>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d108      	bne.n	80027bc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e019      	b.n	80027f0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d002      	beq.n	80027c8 <I2C_MasterReceive_BTF+0xe2>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d108      	bne.n	80027da <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e00a      	b.n	80027f0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d007      	beq.n	80027f0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800284a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d10a      	bne.n	8002876 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fcb7 	bl	80021e2 <HAL_I2C_MemRxCpltCallback>
}
 8002874:	e01d      	b.n	80028b2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2212      	movs	r2, #18
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fc9a 	bl	80021be <HAL_I2C_MasterRxCpltCallback>
}
 800288a:	e012      	b.n	80028b2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d117      	bne.n	80028fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028e8:	e067      	b.n	80029ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]
}
 80028fc:	e05d      	b.n	80029ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002906:	d133      	bne.n	8002970 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b21      	cmp	r3, #33	; 0x21
 8002912:	d109      	bne.n	8002928 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	e008      	b.n	800293a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <I2C_Master_SB+0x92>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	2b00      	cmp	r3, #0
 8002952:	d032      	beq.n	80029ba <I2C_Master_SB+0x100>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d02d      	beq.n	80029ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296c:	605a      	str	r2, [r3, #4]
}
 800296e:	e024      	b.n	80029ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10e      	bne.n	8002996 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	b29b      	uxth	r3, r3
 800297e:	11db      	asrs	r3, r3, #7
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0306 	and.w	r3, r3, #6
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f063 030f 	orn	r3, r3, #15
 800298c:	b2da      	uxtb	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	611a      	str	r2, [r3, #16]
}
 8002994:	e011      	b.n	80029ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10d      	bne.n	80029ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	11db      	asrs	r3, r3, #7
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 0306 	and.w	r3, r3, #6
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f063 030e 	orn	r3, r3, #14
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <I2C_Master_ADD10+0x26>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <I2C_Master_ADD10+0x48>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a0a:	605a      	str	r2, [r3, #4]
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b091      	sub	sp, #68	; 0x44
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b22      	cmp	r3, #34	; 0x22
 8002a3e:	f040 8174 	bne.w	8002d2a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <I2C_Master_ADDR+0x54>
 8002a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d10b      	bne.n	8002a6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	e16b      	b.n	8002d42 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11d      	bne.n	8002aae <I2C_Master_ADDR+0x98>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a7a:	d118      	bne.n	8002aae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8002aac:	e149      	b.n	8002d42 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d113      	bne.n	8002ae0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e120      	b.n	8002d22 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	f040 808a 	bne.w	8002c00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af2:	d137      	bne.n	8002b64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b12:	d113      	bne.n	8002b3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	e0f2      	b.n	8002d22 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e0de      	b.n	8002d22 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d02e      	beq.n	8002bc8 <I2C_Master_ADDR+0x1b2>
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d02b      	beq.n	8002bc8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	2b12      	cmp	r3, #18
 8002b74:	d102      	bne.n	8002b7c <I2C_Master_ADDR+0x166>
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d125      	bne.n	8002bc8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00e      	beq.n	8002ba0 <I2C_Master_ADDR+0x18a>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d00b      	beq.n	8002ba0 <I2C_Master_ADDR+0x18a>
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d008      	beq.n	8002ba0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e007      	b.n	8002bb0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	e0ac      	b.n	8002d22 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e090      	b.n	8002d22 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d158      	bne.n	8002cbc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d021      	beq.n	8002c54 <I2C_Master_ADDR+0x23e>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d01e      	beq.n	8002c54 <I2C_Master_ADDR+0x23e>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d01b      	beq.n	8002c54 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e012      	b.n	8002c7a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c88:	d14b      	bne.n	8002d22 <I2C_Master_ADDR+0x30c>
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c90:	d00b      	beq.n	8002caa <I2C_Master_ADDR+0x294>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d008      	beq.n	8002caa <I2C_Master_ADDR+0x294>
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d005      	beq.n	8002caa <I2C_Master_ADDR+0x294>
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d002      	beq.n	8002caa <I2C_Master_ADDR+0x294>
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d13b      	bne.n	8002d22 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e032      	b.n	8002d22 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cda:	d117      	bne.n	8002d0c <I2C_Master_ADDR+0x2f6>
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ce2:	d00b      	beq.n	8002cfc <I2C_Master_ADDR+0x2e6>
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d008      	beq.n	8002cfc <I2C_Master_ADDR+0x2e6>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d005      	beq.n	8002cfc <I2C_Master_ADDR+0x2e6>
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d002      	beq.n	8002cfc <I2C_Master_ADDR+0x2e6>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d107      	bne.n	8002d0c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d28:	e00b      	b.n	8002d42 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
}
 8002d40:	e7ff      	b.n	8002d42 <I2C_Master_ADDR+0x32c>
 8002d42:	bf00      	nop
 8002d44:	3744      	adds	r7, #68	; 0x44
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02b      	beq.n	8002dbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d114      	bne.n	8002dbe <I2C_SlaveTransmit_TXE+0x72>
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b29      	cmp	r3, #41	; 0x29
 8002d98:	d111      	bne.n	8002dbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2221      	movs	r2, #33	; 0x21
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2228      	movs	r2, #40	; 0x28
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fd fa2d 	bl	8000218 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d011      	beq.n	8002dfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02c      	beq.n	8002e7a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d114      	bne.n	8002e7a <I2C_SlaveReceive_RXNE+0x74>
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b2a      	cmp	r3, #42	; 0x2a
 8002e54:	d111      	bne.n	8002e7a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2222      	movs	r2, #34	; 0x22
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2228      	movs	r2, #40	; 0x28
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fd fa09 	bl	800028c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ede:	2b28      	cmp	r3, #40	; 0x28
 8002ee0:	d127      	bne.n	8002f32 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	09db      	lsrs	r3, r3, #7
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	81bb      	strh	r3, [r7, #12]
 8002f14:	e002      	b.n	8002f1c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f24:	89ba      	ldrh	r2, [r7, #12]
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd f9da 	bl	80002e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f30:	e00e      	b.n	8002f50 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f76:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb4:	d172      	bne.n	800309c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b22      	cmp	r3, #34	; 0x22
 8002fba:	d002      	beq.n	8002fc2 <I2C_Slave_STOPF+0x6a>
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc0:	d135      	bne.n	800302e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0204 	orr.w	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fa04 	bl	8001408 <HAL_DMA_GetState>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d049      	beq.n	800309a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <I2C_Slave_STOPF+0x258>)
 800300c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f87a 	bl	800110c <HAL_DMA_Abort_IT>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03d      	beq.n	800309a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003028:	4610      	mov	r0, r2
 800302a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800302c:	e035      	b.n	800309a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003060:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f9ce 	bl	8001408 <HAL_DMA_GetState>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d014      	beq.n	800309c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <I2C_Slave_STOPF+0x258>)
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe f844 	bl	800110c <HAL_DMA_Abort_IT>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003094:	4610      	mov	r0, r2
 8003096:	4798      	blx	r3
 8003098:	e000      	b.n	800309c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800309a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03e      	beq.n	8003124 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d112      	bne.n	80030da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d112      	bne.n	800310e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8b7 	bl	80032a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003132:	e039      	b.n	80031a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b2a      	cmp	r3, #42	; 0x2a
 8003138:	d109      	bne.n	800314e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2228      	movs	r2, #40	; 0x28
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd f89f 	bl	800028c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b28      	cmp	r3, #40	; 0x28
 8003158:	d111      	bne.n	800317e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <I2C_Slave_STOPF+0x25c>)
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd f8c2 	bl	8000300 <HAL_I2C_ListenCpltCallback>
}
 800317c:	e014      	b.n	80031a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	2b22      	cmp	r3, #34	; 0x22
 8003184:	d002      	beq.n	800318c <I2C_Slave_STOPF+0x234>
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b22      	cmp	r3, #34	; 0x22
 800318a:	d10d      	bne.n	80031a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd f872 	bl	800028c <HAL_I2C_SlaveRxCpltCallback>
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	08003505 	.word	0x08003505
 80031b4:	ffff0000 	.word	0xffff0000

080031b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d002      	beq.n	80031da <I2C_Slave_AF+0x22>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d129      	bne.n	800322e <I2C_Slave_AF+0x76>
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b28      	cmp	r3, #40	; 0x28
 80031de:	d126      	bne.n	800322e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2e      	ldr	r2, [pc, #184]	; (800329c <I2C_Slave_AF+0xe4>)
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd f86a 	bl	8000300 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800322c:	e031      	b.n	8003292 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b21      	cmp	r3, #33	; 0x21
 8003232:	d129      	bne.n	8003288 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <I2C_Slave_AF+0xe4>)
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2221      	movs	r2, #33	; 0x21
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800325e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003268:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe fbde 	bl	8001a3c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fc ffc9 	bl	8000218 <HAL_I2C_SlaveTxCpltCallback>
}
 8003286:	e004      	b.n	8003292 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003290:	615a      	str	r2, [r3, #20]
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	ffff0000 	.word	0xffff0000

080032a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d002      	beq.n	80032c4 <I2C_ITError+0x24>
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d10a      	bne.n	80032da <I2C_ITError+0x3a>
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b22      	cmp	r3, #34	; 0x22
 80032c8:	d107      	bne.n	80032da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032e0:	2b28      	cmp	r3, #40	; 0x28
 80032e2:	d107      	bne.n	80032f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2228      	movs	r2, #40	; 0x28
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032f2:	e015      	b.n	8003320 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003302:	d00a      	beq.n	800331a <I2C_ITError+0x7a>
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b60      	cmp	r3, #96	; 0x60
 8003308:	d007      	beq.n	800331a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332e:	d162      	bne.n	80033f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d020      	beq.n	8003390 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	4a6a      	ldr	r2, [pc, #424]	; (80034fc <I2C_ITError+0x25c>)
 8003354:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fed6 	bl	800110c <HAL_DMA_Abort_IT>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8089 	beq.w	800347a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800338a:	4610      	mov	r0, r2
 800338c:	4798      	blx	r3
 800338e:	e074      	b.n	800347a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	4a59      	ldr	r2, [pc, #356]	; (80034fc <I2C_ITError+0x25c>)
 8003396:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd feb5 	bl	800110c <HAL_DMA_Abort_IT>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d068      	beq.n	800347a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d10b      	bne.n	80033ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f0:	4610      	mov	r0, r2
 80033f2:	4798      	blx	r3
 80033f4:	e041      	b.n	800347a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b60      	cmp	r3, #96	; 0x60
 8003400:	d125      	bne.n	800344e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d10b      	bne.n	8003436 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe fed4 	bl	80021f4 <HAL_I2C_AbortCpltCallback>
 800344c:	e015      	b.n	800347a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d10b      	bne.n	8003474 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fc ff55 	bl	8000324 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10e      	bne.n	80034a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d113      	bne.n	80034f4 <I2C_ITError+0x254>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b28      	cmp	r3, #40	; 0x28
 80034d0:	d110      	bne.n	80034f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <I2C_ITError+0x260>)
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fc ff06 	bl	8000300 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08003505 	.word	0x08003505
 8003500:	ffff0000 	.word	0xffff0000

08003504 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800351e:	4b4b      	ldr	r3, [pc, #300]	; (800364c <I2C_DMAAbort+0x148>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <I2C_DMAAbort+0x14c>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0a1a      	lsrs	r2, r3, #8
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00da      	lsls	r2, r3, #3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800354a:	e00a      	b.n	8003562 <I2C_DMAAbort+0x5e>
    }
    count--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003560:	d0ea      	beq.n	8003538 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	2200      	movs	r2, #0
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2200      	movs	r2, #0
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	2200      	movs	r2, #0
 80035a6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2200      	movs	r2, #0
 80035b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d10e      	bne.n	80035f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7fe fe02 	bl	80021f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035f0:	e027      	b.n	8003642 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035f8:	2b28      	cmp	r3, #40	; 0x28
 80035fa:	d117      	bne.n	800362c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800361a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2228      	movs	r2, #40	; 0x28
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800362a:	e007      	b.n	800363c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800363c:	6978      	ldr	r0, [r7, #20]
 800363e:	f7fc fe71 	bl	8000324 <HAL_I2C_ErrorCallback>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000000 	.word	0x20000000
 8003650:	14f8b589 	.word	0x14f8b589

08003654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	e048      	b.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d044      	beq.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fd fb1b 	bl	8000ca8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d139      	bne.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10d      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	e00c      	b.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	43da      	mvns	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d116      	bne.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e023      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10d      	bne.n	800371e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	43da      	mvns	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4013      	ands	r3, r2
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	e00c      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	429a      	cmp	r2, r3
 800373c:	d093      	beq.n	8003666 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f870 	bl	800383c <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d028      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fd fa9b 	bl	8000ca8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11d      	bne.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d1c3      	bne.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	0a1a      	lsrs	r2, r3, #8
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e008      	b.n	8003828 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d0e9      	beq.n	80037fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000000 	.word	0x20000000
 8003838:	14f8b589 	.word	0x14f8b589

0800383c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003852:	d11b      	bne.n	800388c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038a8:	d103      	bne.n	80038b2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038b0:	e007      	b.n	80038c2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038ba:	d102      	bne.n	80038c2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2208      	movs	r2, #8
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	b08b      	sub	sp, #44	; 0x2c
 80038d0:	af06      	add	r7, sp, #24
 80038d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0f1      	b.n	8003ac2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f846 	bl	8000984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2203      	movs	r2, #3
 80038fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f001 ffbf 	bl	8005888 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	687e      	ldr	r6, [r7, #4]
 8003912:	466d      	mov	r5, sp
 8003914:	f106 0410 	add.w	r4, r6, #16
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	1d33      	adds	r3, r6, #4
 8003922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	f001 ff9f 	bl	8005868 <USB_CoreInit>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0c2      	b.n	8003ac2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 ffba 	bl	80058bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e040      	b.n	80039d0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	3301      	adds	r3, #1
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3303      	adds	r3, #3
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	3338      	adds	r3, #56	; 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	333c      	adds	r3, #60	; 0x3c
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3340      	adds	r3, #64	; 0x40
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3301      	adds	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3b9      	bcc.n	800394e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	e044      	b.n	8003a6a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	3301      	adds	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3b5      	bcc.n	80039e0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	687e      	ldr	r6, [r7, #4]
 8003a7c:	466d      	mov	r5, sp
 8003a7e:	f106 0410 	add.w	r4, r6, #16
 8003a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	1d33      	adds	r3, r6, #4
 8003a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a8e:	6838      	ldr	r0, [r7, #0]
 8003a90:	f001 ff20 	bl	80058d4 <USB_DevInit>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00d      	b.n	8003ac2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 ff2a 	bl	8005914 <USB_DevDisconnect>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003acc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	420e0020 	.word	0x420e0020

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e272      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8087 	beq.w	8003c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b04:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d00c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b10:	4b8f      	ldr	r3, [pc, #572]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d112      	bne.n	8003b42 <HAL_RCC_OscConfig+0x5e>
 8003b1c:	4b8c      	ldr	r3, [pc, #560]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2a:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d06c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x12c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d168      	bne.n	8003c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e24c      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x76>
 8003b4c:	4b80      	ldr	r3, [pc, #512]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7f      	ldr	r2, [pc, #508]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e02e      	b.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x98>
 8003b62:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7a      	ldr	r2, [pc, #488]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b78      	ldr	r3, [pc, #480]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a77      	ldr	r2, [pc, #476]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e01d      	b.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xbc>
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a71      	ldr	r2, [pc, #452]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
 8003ba0:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6a      	ldr	r2, [pc, #424]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a67      	ldr	r2, [pc, #412]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd f872 	bl	8000ca8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fd f86e 	bl	8000ca8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e200      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xe4>
 8003be6:	e014      	b.n	8003c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fd f85e 	bl	8000ca8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fd f85a 	bl	8000ca8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1ec      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x10c>
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d063      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c2a:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d11c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x18c>
 8003c36:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d116      	bne.n	8003c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_RCC_OscConfig+0x176>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e1c0      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	e03a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd f813 	bl	8000ca8 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c86:	f7fd f80f 	bl	8000ca8 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e1a1      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4927      	ldr	r1, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fc fff2 	bl	8000ca8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fc ffee 	bl	8000ca8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e180      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d03a      	beq.n	8003d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d019      	beq.n	8003d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fc ffd2 	bl	8000ca8 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fc ffce 	bl	8000ca8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e160      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f000 face 	bl	80042c8 <RCC_Delay>
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7fc ffb8 	bl	8000ca8 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3a:	e00f      	b.n	8003d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fc ffb4 	bl	8000ca8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d908      	bls.n	8003d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e146      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	42420000 	.word	0x42420000
 8003d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b92      	ldr	r3, [pc, #584]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e9      	bne.n	8003d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a6 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a87      	ldr	r2, [pc, #540]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d90:	61d3      	str	r3, [r2, #28]
 8003d92:	4b85      	ldr	r3, [pc, #532]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b82      	ldr	r3, [pc, #520]	; (8003fac <HAL_RCC_OscConfig+0x4c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d118      	bne.n	8003de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dae:	4b7f      	ldr	r3, [pc, #508]	; (8003fac <HAL_RCC_OscConfig+0x4c8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7e      	ldr	r2, [pc, #504]	; (8003fac <HAL_RCC_OscConfig+0x4c8>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dba:	f7fc ff75 	bl	8000ca8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fc ff71 	bl	8000ca8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	; 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e103      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	4b75      	ldr	r3, [pc, #468]	; (8003fac <HAL_RCC_OscConfig+0x4c8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x312>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6213      	str	r3, [r2, #32]
 8003df4:	e02d      	b.n	8003e52 <HAL_RCC_OscConfig+0x36e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x334>
 8003dfe:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a69      	ldr	r2, [pc, #420]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a66      	ldr	r2, [pc, #408]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6213      	str	r3, [r2, #32]
 8003e16:	e01c      	b.n	8003e52 <HAL_RCC_OscConfig+0x36e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d10c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x356>
 8003e20:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a60      	ldr	r2, [pc, #384]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6213      	str	r3, [r2, #32]
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6213      	str	r3, [r2, #32]
 8003e38:	e00b      	b.n	8003e52 <HAL_RCC_OscConfig+0x36e>
 8003e3a:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4a5a      	ldr	r2, [pc, #360]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6213      	str	r3, [r2, #32]
 8003e46:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	4a57      	ldr	r2, [pc, #348]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5a:	f7fc ff25 	bl	8000ca8 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fc ff21 	bl	8000ca8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0b1      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCC_OscConfig+0x37e>
 8003e84:	e014      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e86:	f7fc ff0f 	bl	8000ca8 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fc ff0b 	bl	8000ca8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e09b      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ee      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d105      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8087 	beq.w	8003fda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d061      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d146      	bne.n	8003f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fc fedf 	bl	8000ca8 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fc fedb 	bl	8000ca8 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e06d      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d108      	bne.n	8003f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4921      	ldr	r1, [pc, #132]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a19      	ldr	r1, [r3, #32]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	491b      	ldr	r1, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fc feaf 	bl	8000ca8 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fc feab 	bl	8000ca8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e03d      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x46a>
 8003f6c:	e035      	b.n	8003fda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fc fe98 	bl	8000ca8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fc fe94 	bl	8000ca8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e026      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x498>
 8003f9a:	e01e      	b.n	8003fda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e019      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x500>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0d0      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0207 	bic.w	r2, r3, #7
 8004012:	4965      	ldr	r1, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800404e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d040      	beq.n	8004108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e073      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06b      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d8:	f7fc fde6 	bl	8000ca8 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fc fde2 	bl	8000ca8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e053      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d210      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 0207 	bic.w	r2, r3, #7
 800411e:	4922      	ldr	r1, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fd44 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40022000 	.word	0x40022000
 80041ac:	40021000 	.word	0x40021000
 80041b0:	08006aac 	.word	0x08006aac
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_RCC_GetSysClockFreq+0x94>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x30>
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x36>
 80041ea:	e027      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041ec:	4b19      	ldr	r3, [pc, #100]	; (8004254 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ee:	613b      	str	r3, [r7, #16]
      break;
 80041f0:	e027      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	0c9b      	lsrs	r3, r3, #18
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_GetSysClockFreq+0x94>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	0c5b      	lsrs	r3, r3, #17
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004216:	5cd3      	ldrb	r3, [r2, r3]
 8004218:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a0d      	ldr	r2, [pc, #52]	; (8004254 <HAL_RCC_GetSysClockFreq+0x98>)
 800421e:	fb03 f202 	mul.w	r2, r3, r2
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e004      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	613b      	str	r3, [r7, #16]
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetSysClockFreq+0x98>)
 800423e:	613b      	str	r3, [r7, #16]
      break;
 8004240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004242:	693b      	ldr	r3, [r7, #16]
}
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	007a1200 	.word	0x007a1200
 8004258:	08006ac4 	.word	0x08006ac4
 800425c:	08006ad4 	.word	0x08006ad4
 8004260:	003d0900 	.word	0x003d0900

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b02      	ldr	r3, [pc, #8]	; (8004274 <HAL_RCC_GetHCLKFreq+0x10>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	20000000 	.word	0x20000000

08004278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800427c:	f7ff fff2 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4903      	ldr	r1, [pc, #12]	; (800429c <HAL_RCC_GetPCLK1Freq+0x24>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	08006abc 	.word	0x08006abc

080042a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a4:	f7ff ffde 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0adb      	lsrs	r3, r3, #11
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	08006abc 	.word	0x08006abc

080042c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <RCC_Delay+0x34>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <RCC_Delay+0x38>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	0a5b      	lsrs	r3, r3, #9
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042e4:	bf00      	nop
  }
  while (Delay --);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	60fa      	str	r2, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f9      	bne.n	80042e4 <RCC_Delay+0x1c>
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	20000000 	.word	0x20000000
 8004300:	10624dd3 	.word	0x10624dd3

08004304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004324:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4a4b      	ldr	r2, [pc, #300]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	61d3      	str	r3, [r2, #28]
 800433c:	4b49      	ldr	r3, [pc, #292]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b46      	ldr	r3, [pc, #280]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d118      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004358:	4b43      	ldr	r3, [pc, #268]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a42      	ldr	r2, [pc, #264]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004364:	f7fc fca0 	bl	8000ca8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	e008      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fc fc9c 	bl	8000ca8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e06d      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d02e      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d027      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b8:	4b2c      	ldr	r3, [pc, #176]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043be:	4a29      	ldr	r2, [pc, #164]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d014      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fc fc6b 	bl	8000ca8 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fc fc67 	bl	8000ca8 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e036      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4917      	ldr	r1, [pc, #92]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	4313      	orrs	r3, r2
 8004408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	490b      	ldr	r1, [pc, #44]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
 800446c:	42420440 	.word	0x42420440

08004470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b10      	cmp	r3, #16
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b10      	cmp	r3, #16
 8004496:	f200 808a 	bhi.w	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d045      	beq.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d075      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80044a6:	e082      	b.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80044a8:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80044ae:	4b45      	ldr	r3, [pc, #276]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07b      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0c9b      	lsrs	r3, r3, #18
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d015      	beq.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044d2:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	0c5b      	lsrs	r3, r3, #17
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044ec:	4a38      	ldr	r2, [pc, #224]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e004      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4a34      	ldr	r2, [pc, #208]	; (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004508:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004514:	d102      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	61bb      	str	r3, [r7, #24]
      break;
 800451a:	e04a      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	e042      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453c:	d108      	bne.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e01f      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455a:	d109      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004568:	f649 4340 	movw	r3, #40000	; 0x9c40
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e00f      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800457a:	d11c      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d016      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004588:	f24f 4324 	movw	r3, #62500	; 0xf424
 800458c:	61bb      	str	r3, [r7, #24]
      break;
 800458e:	e012      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004590:	e011      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004592:	f7ff fe85 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8004596:	4602      	mov	r2, r0
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0b9b      	lsrs	r3, r3, #14
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	61bb      	str	r3, [r7, #24]
      break;
 80045ac:	e004      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80045ae:	bf00      	nop
 80045b0:	e002      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80045b6:	bf00      	nop
    }
  }
  return (frequency);
 80045b8:	69bb      	ldr	r3, [r7, #24]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	08006ad8 	.word	0x08006ad8
 80045cc:	08006ae8 	.word	0x08006ae8
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	003d0900 	.word	0x003d0900
 80045d8:	aaaaaaab 	.word	0xaaaaaaab

080045dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e07a      	b.n	80046e8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	7c5b      	ldrb	r3, [r3, #17]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fc f91c 	bl	8000840 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f870 	bl	80046f4 <HAL_RTC_WaitForSynchro>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2204      	movs	r2, #4
 800461e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e061      	b.n	80046e8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f892 	bl	800474e <RTC_EnterInitMode>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e056      	b.n	80046e8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0207 	bic.w	r2, r2, #7
 8004648:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004652:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <HAL_RTC_Init+0x114>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	4a26      	ldr	r2, [pc, #152]	; (80046f0 <HAL_RTC_Init+0x114>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RTC_Init+0x114>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4921      	ldr	r1, [pc, #132]	; (80046f0 <HAL_RTC_Init+0x114>)
 800466c:	4313      	orrs	r3, r2
 800466e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d003      	beq.n	8004682 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e00e      	b.n	80046a0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004682:	2001      	movs	r0, #1
 8004684:	f7ff fef4 	bl	8004470 <HAL_RCCEx_GetPeriphCLKFreq>
 8004688:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2204      	movs	r2, #4
 8004694:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e026      	b.n	80046e8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b01      	subs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	0c1a      	lsrs	r2, r3, #16
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f002 020f 	and.w	r2, r2, #15
 80046ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	b292      	uxth	r2, r2
 80046b6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f870 	bl	800479e <RTC_ExitInitMode>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00c      	b.n	80046e8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40006c00 	.word	0x40006c00

080046f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e01d      	b.n	8004746 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0208 	bic.w	r2, r2, #8
 8004718:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800471a:	f7fc fac5 	bl	8000ca8 <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004720:	e009      	b.n	8004736 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004722:	f7fc fac1 	bl	8000ca8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004730:	d901      	bls.n	8004736 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e007      	b.n	8004746 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ee      	beq.n	8004722 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800475a:	f7fc faa5 	bl	8000ca8 <HAL_GetTick>
 800475e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004760:	e009      	b.n	8004776 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004762:	f7fc faa1 	bl	8000ca8 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004770:	d901      	bls.n	8004776 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ee      	beq.n	8004762 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0210 	orr.w	r2, r2, #16
 8004792:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0210 	bic.w	r2, r2, #16
 80047b8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80047ba:	f7fc fa75 	bl	8000ca8 <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047c0:	e009      	b.n	80047d6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047c2:	f7fc fa71 	bl	8000ca8 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d0:	d901      	bls.n	80047d6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e007      	b.n	80047e6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ee      	beq.n	80047c2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e042      	b.n	8004886 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc f837 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2224      	movs	r2, #36	; 0x24
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004830:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ff8a 	bl	800574c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004846:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004856:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004866:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08a      	sub	sp, #40	; 0x28
 8004892:	af02      	add	r7, sp, #8
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d16d      	bne.n	800498a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Transmit+0x2c>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e066      	b.n	800498c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2221      	movs	r2, #33	; 0x21
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048cc:	f7fc f9ec 	bl	8000ca8 <HAL_GetTick>
 80048d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d108      	bne.n	80048fa <HAL_UART_Transmit+0x6c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e003      	b.n	8004902 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004902:	e02a      	b.n	800495a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2200      	movs	r2, #0
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fc52 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e036      	b.n	800498c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004932:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3302      	adds	r3, #2
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e007      	b.n	800494c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1cf      	bne.n	8004904 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	2140      	movs	r1, #64	; 0x40
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fc22 	bl	80051b8 <UART_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e006      	b.n	800498c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e000      	b.n	800498c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08c      	sub	sp, #48	; 0x30
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d14a      	bne.n	8004a44 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e043      	b.n	8004a46 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	461a      	mov	r2, r3
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fc5f 	bl	8005294 <UART_Start_Receive_DMA>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80049dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d12c      	bne.n	8004a3e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d125      	bne.n	8004a38 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	617b      	str	r3, [r7, #20]
   return(result);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f043 0310 	orr.w	r3, r3, #16
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a22:	627a      	str	r2, [r7, #36]	; 0x24
 8004a24:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6a39      	ldr	r1, [r7, #32]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e5      	bne.n	8004a02 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004a36:	e002      	b.n	8004a3e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a42:	e000      	b.n	8004a46 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3730      	adds	r7, #48	; 0x30
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b0ba      	sub	sp, #232	; 0xe8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x66>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fd8e 	bl	80055d0 <UART_Receive_IT>
      return;
 8004ab4:	e25b      	b.n	8004f6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80de 	beq.w	8004c7c <HAL_UART_IRQHandler+0x22c>
 8004ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80d1 	beq.w	8004c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_UART_IRQHandler+0xae>
 8004ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_UART_IRQHandler+0xd2>
 8004b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f043 0202 	orr.w	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <HAL_UART_IRQHandler+0xf6>
 8004b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f043 0204 	orr.w	r2, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <HAL_UART_IRQHandler+0x126>
 8004b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	f043 0208 	orr.w	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 81f2 	beq.w	8004f64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_UART_IRQHandler+0x14e>
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fd19 	bl	80055d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <HAL_UART_IRQHandler+0x17a>
 8004bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04f      	beq.n	8004c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fc23 	bl	8005416 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d041      	beq.n	8004c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1d9      	bne.n	8004bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d013      	beq.n	8004c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	4a7e      	ldr	r2, [pc, #504]	; (8004e30 <HAL_UART_IRQHandler+0x3e0>)
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc fa64 	bl	800110c <HAL_DMA_Abort_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00e      	b.n	8004c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9a5 	bl	8004faa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e00a      	b.n	8004c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f9a1 	bl	8004faa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	e006      	b.n	8004c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f99d 	bl	8004faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c76:	e175      	b.n	8004f64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	bf00      	nop
    return;
 8004c7a:	e173      	b.n	8004f64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	f040 814f 	bne.w	8004f24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8148 	beq.w	8004f24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8141 	beq.w	8004f24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80b6 	beq.w	8004e34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8145 	beq.w	8004f68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	f080 813e 	bcs.w	8004f68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	f000 8088 	beq.w	8004e10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d2c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1d9      	bne.n	8004d00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3314      	adds	r3, #20
 8004d52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e1      	bne.n	8004d4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3314      	adds	r3, #20
 8004d8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004db2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e3      	bne.n	8004d88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de0:	f023 0310 	bic.w	r3, r3, #16
 8004de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004df2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004df4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e3      	bne.n	8004dce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fc f942 	bl	8001094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fb f9ca 	bl	80001c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e2c:	e09c      	b.n	8004f68 <HAL_UART_IRQHandler+0x518>
 8004e2e:	bf00      	nop
 8004e30:	080054db 	.word	0x080054db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 808e 	beq.w	8004f6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8089 	beq.w	8004f6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e3      	bne.n	8004e5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3314      	adds	r3, #20
 8004eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e3      	bne.n	8004e92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0310 	bic.w	r3, r3, #16
 8004eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004efc:	61fa      	str	r2, [r7, #28]
 8004efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	69b9      	ldr	r1, [r7, #24]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	617b      	str	r3, [r7, #20]
   return(result);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e3      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fb f94f 	bl	80001c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f22:	e023      	b.n	8004f6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d009      	beq.n	8004f44 <HAL_UART_IRQHandler+0x4f4>
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fae0 	bl	8005502 <UART_Transmit_IT>
    return;
 8004f42:	e014      	b.n	8004f6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00e      	beq.n	8004f6e <HAL_UART_IRQHandler+0x51e>
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb1f 	bl	80055a0 <UART_EndTransmit_IT>
    return;
 8004f62:	e004      	b.n	8004f6e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f64:	bf00      	nop
 8004f66:	e002      	b.n	8004f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f6c:	bf00      	nop
  }
}
 8004f6e:	37e8      	adds	r7, #232	; 0xe8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b09c      	sub	sp, #112	; 0x70
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d172      	bne.n	80050be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ffe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005000:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800500c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	667b      	str	r3, [r7, #100]	; 0x64
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005032:	647a      	str	r2, [r7, #68]	; 0x44
 8005034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3314      	adds	r3, #20
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	623b      	str	r3, [r7, #32]
   return(result);
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505c:	663b      	str	r3, [r7, #96]	; 0x60
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005066:	633a      	str	r2, [r7, #48]	; 0x30
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	2220      	movs	r2, #32
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	2b01      	cmp	r3, #1
 8005088:	d119      	bne.n	80050be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	60fb      	str	r3, [r7, #12]
   return(result);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050aa:	61fa      	str	r2, [r7, #28]
 80050ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	69b9      	ldr	r1, [r7, #24]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	617b      	str	r3, [r7, #20]
   return(result);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c0:	2200      	movs	r2, #0
 80050c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d0:	4619      	mov	r1, r3
 80050d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80050d4:	f7fb f874 	bl	80001c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050d8:	e002      	b.n	80050e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80050da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80050dc:	f7ff ff53 	bl	8004f86 <HAL_UART_RxCpltCallback>
}
 80050e0:	bf00      	nop
 80050e2:	3770      	adds	r7, #112	; 0x70
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	d108      	bne.n	8005116 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	b29b      	uxth	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7fb f856 	bl	80001c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005114:	e002      	b.n	800511c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff3e 	bl	8004f98 <HAL_UART_RxHalfCpltCallback>
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b21      	cmp	r3, #33	; 0x21
 8005156:	d108      	bne.n	800516a <UART_DMAError+0x46>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2200      	movs	r2, #0
 8005162:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005164:	68b8      	ldr	r0, [r7, #8]
 8005166:	f000 f92f 	bl	80053c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b22      	cmp	r3, #34	; 0x22
 800518a:	d108      	bne.n	800519e <UART_DMAError+0x7a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005198:	68b8      	ldr	r0, [r7, #8]
 800519a:	f000 f93c 	bl	8005416 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f043 0210 	orr.w	r2, r3, #16
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051aa:	68b8      	ldr	r0, [r7, #8]
 80051ac:	f7ff fefd 	bl	8004faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b090      	sub	sp, #64	; 0x40
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c8:	e050      	b.n	800526c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d04c      	beq.n	800526c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051d8:	f7fb fd66 	bl	8000ca8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d241      	bcs.n	800526c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005208:	637a      	str	r2, [r7, #52]	; 0x34
 800520a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	613b      	str	r3, [r7, #16]
   return(result);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3314      	adds	r3, #20
 800523a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800523c:	623a      	str	r2, [r7, #32]
 800523e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	61bb      	str	r3, [r7, #24]
   return(result);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e00f      	b.n	800528c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4013      	ands	r3, r2
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	429a      	cmp	r2, r3
 8005288:	d09f      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3740      	adds	r7, #64	; 0x40
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b098      	sub	sp, #96	; 0x60
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2222      	movs	r2, #34	; 0x22
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	4a3e      	ldr	r2, [pc, #248]	; (80053bc <UART_Start_Receive_DMA+0x128>)
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	4a3d      	ldr	r2, [pc, #244]	; (80053c0 <UART_Start_Receive_DMA+0x12c>)
 80052ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	4a3c      	ldr	r2, [pc, #240]	; (80053c4 <UART_Start_Receive_DMA+0x130>)
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d8:	2200      	movs	r2, #0
 80052da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	f7fb fe6e 	bl	8000fd4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d019      	beq.n	800534a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532c:	65bb      	str	r3, [r7, #88]	; 0x58
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005336:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005338:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800533c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3314      	adds	r3, #20
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	657b      	str	r3, [r7, #84]	; 0x54
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800536a:	63ba      	str	r2, [r7, #56]	; 0x38
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	617b      	str	r3, [r7, #20]
   return(result);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005394:	653b      	str	r3, [r7, #80]	; 0x50
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800539e:	627a      	str	r2, [r7, #36]	; 0x24
 80053a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6a39      	ldr	r1, [r7, #32]
 80053a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3760      	adds	r7, #96	; 0x60
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	08004fbd 	.word	0x08004fbd
 80053c0:	080050e9 	.word	0x080050e9
 80053c4:	08005125 	.word	0x08005125

080053c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	; 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	61ba      	str	r2, [r7, #24]
 80053f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	613b      	str	r3, [r7, #16]
   return(result);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800540c:	bf00      	nop
 800540e:	3724      	adds	r7, #36	; 0x24
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005416:	b480      	push	{r7}
 8005418:	b095      	sub	sp, #84	; 0x54
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800543e:	643a      	str	r2, [r7, #64]	; 0x40
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3314      	adds	r3, #20
 8005458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	61fb      	str	r3, [r7, #28]
   return(result);
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	64bb      	str	r3, [r7, #72]	; 0x48
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3314      	adds	r3, #20
 8005470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e5      	bne.n	8005452 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	2b01      	cmp	r3, #1
 800548c:	d119      	bne.n	80054c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	60bb      	str	r3, [r7, #8]
   return(result);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f023 0310 	bic.w	r3, r3, #16
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ae:	61ba      	str	r2, [r7, #24]
 80054b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	613b      	str	r3, [r7, #16]
   return(result);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054d0:	bf00      	nop
 80054d2:	3754      	adds	r7, #84	; 0x54
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff fd58 	bl	8004faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b21      	cmp	r3, #33	; 0x21
 8005514:	d13e      	bne.n	8005594 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	d114      	bne.n	800554a <UART_Transmit_IT+0x48>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d110      	bne.n	800554a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800553c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]
 8005548:	e008      	b.n	800555c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	1c59      	adds	r1, r3, #1
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6211      	str	r1, [r2, #32]
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29b      	uxth	r3, r3
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4619      	mov	r1, r3
 800556a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10f      	bne.n	8005590 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800557e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fcd7 	bl	8004f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b22      	cmp	r3, #34	; 0x22
 80055e2:	f040 80ae 	bne.w	8005742 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ee:	d117      	bne.n	8005620 <UART_Receive_IT+0x50>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d113      	bne.n	8005620 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560e:	b29a      	uxth	r2, r3
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	629a      	str	r2, [r3, #40]	; 0x28
 800561e:	e026      	b.n	800566e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d007      	beq.n	8005644 <UART_Receive_IT+0x74>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <UART_Receive_IT+0x82>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e008      	b.n	8005664 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565e:	b2da      	uxtb	r2, r3
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29b      	uxth	r3, r3
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4619      	mov	r1, r3
 800567c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800567e:	2b00      	cmp	r3, #0
 8005680:	d15d      	bne.n	800573e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0220 	bic.w	r2, r2, #32
 8005690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d135      	bne.n	8005734 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	613b      	str	r3, [r7, #16]
   return(result);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f023 0310 	bic.w	r3, r3, #16
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ee:	623a      	str	r2, [r7, #32]
 80056f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	69f9      	ldr	r1, [r7, #28]
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b10      	cmp	r3, #16
 800570e:	d10a      	bne.n	8005726 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fa fd47 	bl	80001c0 <HAL_UARTEx_RxEventCallback>
 8005732:	e002      	b.n	800573a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fc26 	bl	8004f86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e002      	b.n	8005744 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3730      	adds	r7, #48	; 0x30
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005786:	f023 030c 	bic.w	r3, r3, #12
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	430b      	orrs	r3, r1
 8005792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	; (8005860 <UART_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d103      	bne.n	80057bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057b4:	f7fe fd74 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	e002      	b.n	80057c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057bc:	f7fe fd5c 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 80057c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009a      	lsls	r2, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	4a22      	ldr	r2, [pc, #136]	; (8005864 <UART_SetConfig+0x118>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	0119      	lsls	r1, r3, #4
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009a      	lsls	r2, r3, #2
 80057ec:	441a      	add	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f8:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <UART_SetConfig+0x118>)
 80057fa:	fba3 0302 	umull	r0, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	2064      	movs	r0, #100	; 0x64
 8005802:	fb00 f303 	mul.w	r3, r0, r3
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	3332      	adds	r3, #50	; 0x32
 800580c:	4a15      	ldr	r2, [pc, #84]	; (8005864 <UART_SetConfig+0x118>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005818:	4419      	add	r1, r3
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009a      	lsls	r2, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <UART_SetConfig+0x118>)
 8005832:	fba3 0302 	umull	r0, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2064      	movs	r0, #100	; 0x64
 800583a:	fb00 f303 	mul.w	r3, r0, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a07      	ldr	r2, [pc, #28]	; (8005864 <UART_SetConfig+0x118>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	440a      	add	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40013800 	.word	0x40013800
 8005864:	51eb851f 	.word	0x51eb851f

08005868 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005868:	b084      	sub	sp, #16
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	f107 0014 	add.w	r0, r7, #20
 8005876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	b004      	add	sp, #16
 8005886:	4770      	bx	lr

08005888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005890:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005894:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4013      	ands	r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058d4:	b084      	sub	sp, #16
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	f107 0014 	add.w	r0, r7, #20
 80058e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr

08005914 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	; (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000000c 	.word	0x2000000c

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	2600      	movs	r6, #0
 8005938:	4d0c      	ldr	r5, [pc, #48]	; (800596c <__libc_init_array+0x38>)
 800593a:	4c0d      	ldr	r4, [pc, #52]	; (8005970 <__libc_init_array+0x3c>)
 800593c:	1b64      	subs	r4, r4, r5
 800593e:	10a4      	asrs	r4, r4, #2
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	f001 f834 	bl	80069b0 <_init>
 8005948:	2600      	movs	r6, #0
 800594a:	4d0a      	ldr	r5, [pc, #40]	; (8005974 <__libc_init_array+0x40>)
 800594c:	4c0a      	ldr	r4, [pc, #40]	; (8005978 <__libc_init_array+0x44>)
 800594e:	1b64      	subs	r4, r4, r5
 8005950:	10a4      	asrs	r4, r4, #2
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	08006b84 	.word	0x08006b84
 8005970:	08006b84 	.word	0x08006b84
 8005974:	08006b84 	.word	0x08006b84
 8005978:	08006b88 	.word	0x08006b88

0800597c <memset>:
 800597c:	4603      	mov	r3, r0
 800597e:	4402      	add	r2, r0
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <iprintf>:
 800598c:	b40f      	push	{r0, r1, r2, r3}
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <iprintf+0x2c>)
 8005990:	b513      	push	{r0, r1, r4, lr}
 8005992:	681c      	ldr	r4, [r3, #0]
 8005994:	b124      	cbz	r4, 80059a0 <iprintf+0x14>
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	b913      	cbnz	r3, 80059a0 <iprintf+0x14>
 800599a:	4620      	mov	r0, r4
 800599c:	f000 fa62 	bl	8005e64 <__sinit>
 80059a0:	ab05      	add	r3, sp, #20
 80059a2:	4620      	mov	r0, r4
 80059a4:	9a04      	ldr	r2, [sp, #16]
 80059a6:	68a1      	ldr	r1, [r4, #8]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	f000 fc65 	bl	8006278 <_vfiprintf_r>
 80059ae:	b002      	add	sp, #8
 80059b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr
 80059b8:	2000000c 	.word	0x2000000c

080059bc <_puts_r>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	460e      	mov	r6, r1
 80059c0:	4605      	mov	r5, r0
 80059c2:	b118      	cbz	r0, 80059cc <_puts_r+0x10>
 80059c4:	6983      	ldr	r3, [r0, #24]
 80059c6:	b90b      	cbnz	r3, 80059cc <_puts_r+0x10>
 80059c8:	f000 fa4c 	bl	8005e64 <__sinit>
 80059cc:	69ab      	ldr	r3, [r5, #24]
 80059ce:	68ac      	ldr	r4, [r5, #8]
 80059d0:	b913      	cbnz	r3, 80059d8 <_puts_r+0x1c>
 80059d2:	4628      	mov	r0, r5
 80059d4:	f000 fa46 	bl	8005e64 <__sinit>
 80059d8:	4b2c      	ldr	r3, [pc, #176]	; (8005a8c <_puts_r+0xd0>)
 80059da:	429c      	cmp	r4, r3
 80059dc:	d120      	bne.n	8005a20 <_puts_r+0x64>
 80059de:	686c      	ldr	r4, [r5, #4]
 80059e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059e2:	07db      	lsls	r3, r3, #31
 80059e4:	d405      	bmi.n	80059f2 <_puts_r+0x36>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	0598      	lsls	r0, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <_puts_r+0x36>
 80059ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ee:	f000 fad7 	bl	8005fa0 <__retarget_lock_acquire_recursive>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	0719      	lsls	r1, r3, #28
 80059f6:	d51d      	bpl.n	8005a34 <_puts_r+0x78>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	b1db      	cbz	r3, 8005a34 <_puts_r+0x78>
 80059fc:	3e01      	subs	r6, #1
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	bb39      	cbnz	r1, 8005a5a <_puts_r+0x9e>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da38      	bge.n	8005a80 <_puts_r+0xc4>
 8005a0e:	4622      	mov	r2, r4
 8005a10:	210a      	movs	r1, #10
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f850 	bl	8005ab8 <__swbuf_r>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d011      	beq.n	8005a40 <_puts_r+0x84>
 8005a1c:	250a      	movs	r5, #10
 8005a1e:	e011      	b.n	8005a44 <_puts_r+0x88>
 8005a20:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <_puts_r+0xd4>)
 8005a22:	429c      	cmp	r4, r3
 8005a24:	d101      	bne.n	8005a2a <_puts_r+0x6e>
 8005a26:	68ac      	ldr	r4, [r5, #8]
 8005a28:	e7da      	b.n	80059e0 <_puts_r+0x24>
 8005a2a:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <_puts_r+0xd8>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	bf08      	it	eq
 8005a30:	68ec      	ldreq	r4, [r5, #12]
 8005a32:	e7d5      	b.n	80059e0 <_puts_r+0x24>
 8005a34:	4621      	mov	r1, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f890 	bl	8005b5c <__swsetup_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d0dd      	beq.n	80059fc <_puts_r+0x40>
 8005a40:	f04f 35ff 	mov.w	r5, #4294967295
 8005a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a46:	07da      	lsls	r2, r3, #31
 8005a48:	d405      	bmi.n	8005a56 <_puts_r+0x9a>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	059b      	lsls	r3, r3, #22
 8005a4e:	d402      	bmi.n	8005a56 <_puts_r+0x9a>
 8005a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a52:	f000 faa6 	bl	8005fa2 <__retarget_lock_release_recursive>
 8005a56:	4628      	mov	r0, r5
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da04      	bge.n	8005a68 <_puts_r+0xac>
 8005a5e:	69a2      	ldr	r2, [r4, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	dc06      	bgt.n	8005a72 <_puts_r+0xb6>
 8005a64:	290a      	cmp	r1, #10
 8005a66:	d004      	beq.n	8005a72 <_puts_r+0xb6>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	7019      	strb	r1, [r3, #0]
 8005a70:	e7c5      	b.n	80059fe <_puts_r+0x42>
 8005a72:	4622      	mov	r2, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 f81f 	bl	8005ab8 <__swbuf_r>
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d1bf      	bne.n	80059fe <_puts_r+0x42>
 8005a7e:	e7df      	b.n	8005a40 <_puts_r+0x84>
 8005a80:	250a      	movs	r5, #10
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	701d      	strb	r5, [r3, #0]
 8005a8a:	e7db      	b.n	8005a44 <_puts_r+0x88>
 8005a8c:	08006b10 	.word	0x08006b10
 8005a90:	08006b30 	.word	0x08006b30
 8005a94:	08006af0 	.word	0x08006af0

08005a98 <puts>:
 8005a98:	4b02      	ldr	r3, [pc, #8]	; (8005aa4 <puts+0xc>)
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f7ff bf8d 	b.w	80059bc <_puts_r>
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c

08005aa8 <strcpy>:
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aae:	f803 2b01 	strb.w	r2, [r3], #1
 8005ab2:	2a00      	cmp	r2, #0
 8005ab4:	d1f9      	bne.n	8005aaa <strcpy+0x2>
 8005ab6:	4770      	bx	lr

08005ab8 <__swbuf_r>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	460e      	mov	r6, r1
 8005abc:	4614      	mov	r4, r2
 8005abe:	4605      	mov	r5, r0
 8005ac0:	b118      	cbz	r0, 8005aca <__swbuf_r+0x12>
 8005ac2:	6983      	ldr	r3, [r0, #24]
 8005ac4:	b90b      	cbnz	r3, 8005aca <__swbuf_r+0x12>
 8005ac6:	f000 f9cd 	bl	8005e64 <__sinit>
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <__swbuf_r+0x98>)
 8005acc:	429c      	cmp	r4, r3
 8005ace:	d12b      	bne.n	8005b28 <__swbuf_r+0x70>
 8005ad0:	686c      	ldr	r4, [r5, #4]
 8005ad2:	69a3      	ldr	r3, [r4, #24]
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	071a      	lsls	r2, r3, #28
 8005ada:	d52f      	bpl.n	8005b3c <__swbuf_r+0x84>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	b36b      	cbz	r3, 8005b3c <__swbuf_r+0x84>
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	b2f6      	uxtb	r6, r6
 8005ae6:	1ac0      	subs	r0, r0, r3
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	4637      	mov	r7, r6
 8005aec:	4283      	cmp	r3, r0
 8005aee:	dc04      	bgt.n	8005afa <__swbuf_r+0x42>
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 f922 	bl	8005d3c <_fflush_r>
 8005af8:	bb30      	cbnz	r0, 8005b48 <__swbuf_r+0x90>
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	3001      	adds	r0, #1
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	701e      	strb	r6, [r3, #0]
 8005b0a:	6963      	ldr	r3, [r4, #20]
 8005b0c:	4283      	cmp	r3, r0
 8005b0e:	d004      	beq.n	8005b1a <__swbuf_r+0x62>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	07db      	lsls	r3, r3, #31
 8005b14:	d506      	bpl.n	8005b24 <__swbuf_r+0x6c>
 8005b16:	2e0a      	cmp	r6, #10
 8005b18:	d104      	bne.n	8005b24 <__swbuf_r+0x6c>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f90d 	bl	8005d3c <_fflush_r>
 8005b22:	b988      	cbnz	r0, 8005b48 <__swbuf_r+0x90>
 8005b24:	4638      	mov	r0, r7
 8005b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <__swbuf_r+0x9c>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	d101      	bne.n	8005b32 <__swbuf_r+0x7a>
 8005b2e:	68ac      	ldr	r4, [r5, #8]
 8005b30:	e7cf      	b.n	8005ad2 <__swbuf_r+0x1a>
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <__swbuf_r+0xa0>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	bf08      	it	eq
 8005b38:	68ec      	ldreq	r4, [r5, #12]
 8005b3a:	e7ca      	b.n	8005ad2 <__swbuf_r+0x1a>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f80c 	bl	8005b5c <__swsetup_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d0cb      	beq.n	8005ae0 <__swbuf_r+0x28>
 8005b48:	f04f 37ff 	mov.w	r7, #4294967295
 8005b4c:	e7ea      	b.n	8005b24 <__swbuf_r+0x6c>
 8005b4e:	bf00      	nop
 8005b50:	08006b10 	.word	0x08006b10
 8005b54:	08006b30 	.word	0x08006b30
 8005b58:	08006af0 	.word	0x08006af0

08005b5c <__swsetup_r>:
 8005b5c:	4b32      	ldr	r3, [pc, #200]	; (8005c28 <__swsetup_r+0xcc>)
 8005b5e:	b570      	push	{r4, r5, r6, lr}
 8005b60:	681d      	ldr	r5, [r3, #0]
 8005b62:	4606      	mov	r6, r0
 8005b64:	460c      	mov	r4, r1
 8005b66:	b125      	cbz	r5, 8005b72 <__swsetup_r+0x16>
 8005b68:	69ab      	ldr	r3, [r5, #24]
 8005b6a:	b913      	cbnz	r3, 8005b72 <__swsetup_r+0x16>
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 f979 	bl	8005e64 <__sinit>
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <__swsetup_r+0xd0>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d10f      	bne.n	8005b98 <__swsetup_r+0x3c>
 8005b78:	686c      	ldr	r4, [r5, #4]
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b80:	0719      	lsls	r1, r3, #28
 8005b82:	d42c      	bmi.n	8005bde <__swsetup_r+0x82>
 8005b84:	06dd      	lsls	r5, r3, #27
 8005b86:	d411      	bmi.n	8005bac <__swsetup_r+0x50>
 8005b88:	2309      	movs	r3, #9
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	81a3      	strh	r3, [r4, #12]
 8005b96:	e03e      	b.n	8005c16 <__swsetup_r+0xba>
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <__swsetup_r+0xd4>)
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	d101      	bne.n	8005ba2 <__swsetup_r+0x46>
 8005b9e:	68ac      	ldr	r4, [r5, #8]
 8005ba0:	e7eb      	b.n	8005b7a <__swsetup_r+0x1e>
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <__swsetup_r+0xd8>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	bf08      	it	eq
 8005ba8:	68ec      	ldreq	r4, [r5, #12]
 8005baa:	e7e6      	b.n	8005b7a <__swsetup_r+0x1e>
 8005bac:	0758      	lsls	r0, r3, #29
 8005bae:	d512      	bpl.n	8005bd6 <__swsetup_r+0x7a>
 8005bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bb2:	b141      	cbz	r1, 8005bc6 <__swsetup_r+0x6a>
 8005bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <__swsetup_r+0x66>
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	f000 fa57 	bl	8006070 <_free_r>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6063      	str	r3, [r4, #4]
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	b94b      	cbnz	r3, 8005bf6 <__swsetup_r+0x9a>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bec:	d003      	beq.n	8005bf6 <__swsetup_r+0x9a>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 f9fd 	bl	8005ff0 <__smakebuf_r>
 8005bf6:	89a0      	ldrh	r0, [r4, #12]
 8005bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bfc:	f010 0301 	ands.w	r3, r0, #1
 8005c00:	d00a      	beq.n	8005c18 <__swsetup_r+0xbc>
 8005c02:	2300      	movs	r3, #0
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	6963      	ldr	r3, [r4, #20]
 8005c08:	425b      	negs	r3, r3
 8005c0a:	61a3      	str	r3, [r4, #24]
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	b943      	cbnz	r3, 8005c22 <__swsetup_r+0xc6>
 8005c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c14:	d1ba      	bne.n	8005b8c <__swsetup_r+0x30>
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	0781      	lsls	r1, r0, #30
 8005c1a:	bf58      	it	pl
 8005c1c:	6963      	ldrpl	r3, [r4, #20]
 8005c1e:	60a3      	str	r3, [r4, #8]
 8005c20:	e7f4      	b.n	8005c0c <__swsetup_r+0xb0>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e7f7      	b.n	8005c16 <__swsetup_r+0xba>
 8005c26:	bf00      	nop
 8005c28:	2000000c 	.word	0x2000000c
 8005c2c:	08006b10 	.word	0x08006b10
 8005c30:	08006b30 	.word	0x08006b30
 8005c34:	08006af0 	.word	0x08006af0

08005c38 <__sflush_r>:
 8005c38:	898a      	ldrh	r2, [r1, #12]
 8005c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	0710      	lsls	r0, r2, #28
 8005c40:	460c      	mov	r4, r1
 8005c42:	d457      	bmi.n	8005cf4 <__sflush_r+0xbc>
 8005c44:	684b      	ldr	r3, [r1, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dc04      	bgt.n	8005c54 <__sflush_r+0x1c>
 8005c4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	dc01      	bgt.n	8005c54 <__sflush_r+0x1c>
 8005c50:	2000      	movs	r0, #0
 8005c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	d0fa      	beq.n	8005c50 <__sflush_r+0x18>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c60:	682f      	ldr	r7, [r5, #0]
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	d032      	beq.n	8005ccc <__sflush_r+0x94>
 8005c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	075a      	lsls	r2, r3, #29
 8005c6c:	d505      	bpl.n	8005c7a <__sflush_r+0x42>
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	1ac0      	subs	r0, r0, r3
 8005c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c74:	b10b      	cbz	r3, 8005c7a <__sflush_r+0x42>
 8005c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c78:	1ac0      	subs	r0, r0, r3
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c80:	4628      	mov	r0, r5
 8005c82:	6a21      	ldr	r1, [r4, #32]
 8005c84:	47b0      	blx	r6
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	d106      	bne.n	8005c9a <__sflush_r+0x62>
 8005c8c:	6829      	ldr	r1, [r5, #0]
 8005c8e:	291d      	cmp	r1, #29
 8005c90:	d82c      	bhi.n	8005cec <__sflush_r+0xb4>
 8005c92:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <__sflush_r+0x100>)
 8005c94:	40ca      	lsrs	r2, r1
 8005c96:	07d6      	lsls	r6, r2, #31
 8005c98:	d528      	bpl.n	8005cec <__sflush_r+0xb4>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	6062      	str	r2, [r4, #4]
 8005c9e:	6922      	ldr	r2, [r4, #16]
 8005ca0:	04d9      	lsls	r1, r3, #19
 8005ca2:	6022      	str	r2, [r4, #0]
 8005ca4:	d504      	bpl.n	8005cb0 <__sflush_r+0x78>
 8005ca6:	1c42      	adds	r2, r0, #1
 8005ca8:	d101      	bne.n	8005cae <__sflush_r+0x76>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	b903      	cbnz	r3, 8005cb0 <__sflush_r+0x78>
 8005cae:	6560      	str	r0, [r4, #84]	; 0x54
 8005cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb2:	602f      	str	r7, [r5, #0]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	d0cb      	beq.n	8005c50 <__sflush_r+0x18>
 8005cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	d002      	beq.n	8005cc6 <__sflush_r+0x8e>
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f000 f9d5 	bl	8006070 <_free_r>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005cca:	e7c2      	b.n	8005c52 <__sflush_r+0x1a>
 8005ccc:	6a21      	ldr	r1, [r4, #32]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b0      	blx	r6
 8005cd4:	1c41      	adds	r1, r0, #1
 8005cd6:	d1c7      	bne.n	8005c68 <__sflush_r+0x30>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0c4      	beq.n	8005c68 <__sflush_r+0x30>
 8005cde:	2b1d      	cmp	r3, #29
 8005ce0:	d001      	beq.n	8005ce6 <__sflush_r+0xae>
 8005ce2:	2b16      	cmp	r3, #22
 8005ce4:	d101      	bne.n	8005cea <__sflush_r+0xb2>
 8005ce6:	602f      	str	r7, [r5, #0]
 8005ce8:	e7b2      	b.n	8005c50 <__sflush_r+0x18>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	e7ae      	b.n	8005c52 <__sflush_r+0x1a>
 8005cf4:	690f      	ldr	r7, [r1, #16]
 8005cf6:	2f00      	cmp	r7, #0
 8005cf8:	d0aa      	beq.n	8005c50 <__sflush_r+0x18>
 8005cfa:	0793      	lsls	r3, r2, #30
 8005cfc:	bf18      	it	ne
 8005cfe:	2300      	movne	r3, #0
 8005d00:	680e      	ldr	r6, [r1, #0]
 8005d02:	bf08      	it	eq
 8005d04:	694b      	ldreq	r3, [r1, #20]
 8005d06:	1bf6      	subs	r6, r6, r7
 8005d08:	600f      	str	r7, [r1, #0]
 8005d0a:	608b      	str	r3, [r1, #8]
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	dd9f      	ble.n	8005c50 <__sflush_r+0x18>
 8005d10:	4633      	mov	r3, r6
 8005d12:	463a      	mov	r2, r7
 8005d14:	4628      	mov	r0, r5
 8005d16:	6a21      	ldr	r1, [r4, #32]
 8005d18:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005d1c:	47e0      	blx	ip
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	dc06      	bgt.n	8005d30 <__sflush_r+0xf8>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	e790      	b.n	8005c52 <__sflush_r+0x1a>
 8005d30:	4407      	add	r7, r0
 8005d32:	1a36      	subs	r6, r6, r0
 8005d34:	e7ea      	b.n	8005d0c <__sflush_r+0xd4>
 8005d36:	bf00      	nop
 8005d38:	20400001 	.word	0x20400001

08005d3c <_fflush_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	690b      	ldr	r3, [r1, #16]
 8005d40:	4605      	mov	r5, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	b913      	cbnz	r3, 8005d4c <_fflush_r+0x10>
 8005d46:	2500      	movs	r5, #0
 8005d48:	4628      	mov	r0, r5
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	b118      	cbz	r0, 8005d56 <_fflush_r+0x1a>
 8005d4e:	6983      	ldr	r3, [r0, #24]
 8005d50:	b90b      	cbnz	r3, 8005d56 <_fflush_r+0x1a>
 8005d52:	f000 f887 	bl	8005e64 <__sinit>
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <_fflush_r+0x6c>)
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	d11b      	bne.n	8005d94 <_fflush_r+0x58>
 8005d5c:	686c      	ldr	r4, [r5, #4]
 8005d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ef      	beq.n	8005d46 <_fflush_r+0xa>
 8005d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d68:	07d0      	lsls	r0, r2, #31
 8005d6a:	d404      	bmi.n	8005d76 <_fflush_r+0x3a>
 8005d6c:	0599      	lsls	r1, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_fflush_r+0x3a>
 8005d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d72:	f000 f915 	bl	8005fa0 <__retarget_lock_acquire_recursive>
 8005d76:	4628      	mov	r0, r5
 8005d78:	4621      	mov	r1, r4
 8005d7a:	f7ff ff5d 	bl	8005c38 <__sflush_r>
 8005d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d80:	4605      	mov	r5, r0
 8005d82:	07da      	lsls	r2, r3, #31
 8005d84:	d4e0      	bmi.n	8005d48 <_fflush_r+0xc>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	059b      	lsls	r3, r3, #22
 8005d8a:	d4dd      	bmi.n	8005d48 <_fflush_r+0xc>
 8005d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d8e:	f000 f908 	bl	8005fa2 <__retarget_lock_release_recursive>
 8005d92:	e7d9      	b.n	8005d48 <_fflush_r+0xc>
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <_fflush_r+0x70>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d101      	bne.n	8005d9e <_fflush_r+0x62>
 8005d9a:	68ac      	ldr	r4, [r5, #8]
 8005d9c:	e7df      	b.n	8005d5e <_fflush_r+0x22>
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <_fflush_r+0x74>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	bf08      	it	eq
 8005da4:	68ec      	ldreq	r4, [r5, #12]
 8005da6:	e7da      	b.n	8005d5e <_fflush_r+0x22>
 8005da8:	08006b10 	.word	0x08006b10
 8005dac:	08006b30 	.word	0x08006b30
 8005db0:	08006af0 	.word	0x08006af0

08005db4 <std>:
 8005db4:	2300      	movs	r3, #0
 8005db6:	b510      	push	{r4, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	e9c0 3300 	strd	r3, r3, [r0]
 8005dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dc2:	6083      	str	r3, [r0, #8]
 8005dc4:	8181      	strh	r1, [r0, #12]
 8005dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8005dc8:	81c2      	strh	r2, [r0, #14]
 8005dca:	6183      	str	r3, [r0, #24]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	2208      	movs	r2, #8
 8005dd0:	305c      	adds	r0, #92	; 0x5c
 8005dd2:	f7ff fdd3 	bl	800597c <memset>
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <std+0x38>)
 8005dd8:	6224      	str	r4, [r4, #32]
 8005dda:	6263      	str	r3, [r4, #36]	; 0x24
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <std+0x3c>)
 8005dde:	62a3      	str	r3, [r4, #40]	; 0x28
 8005de0:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <std+0x40>)
 8005de2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <std+0x44>)
 8005de6:	6323      	str	r3, [r4, #48]	; 0x30
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	bf00      	nop
 8005dec:	08006825 	.word	0x08006825
 8005df0:	08006847 	.word	0x08006847
 8005df4:	0800687f 	.word	0x0800687f
 8005df8:	080068a3 	.word	0x080068a3

08005dfc <_cleanup_r>:
 8005dfc:	4901      	ldr	r1, [pc, #4]	; (8005e04 <_cleanup_r+0x8>)
 8005dfe:	f000 b8af 	b.w	8005f60 <_fwalk_reent>
 8005e02:	bf00      	nop
 8005e04:	08005d3d 	.word	0x08005d3d

08005e08 <__sfmoreglue>:
 8005e08:	2268      	movs	r2, #104	; 0x68
 8005e0a:	b570      	push	{r4, r5, r6, lr}
 8005e0c:	1e4d      	subs	r5, r1, #1
 8005e0e:	4355      	muls	r5, r2
 8005e10:	460e      	mov	r6, r1
 8005e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e16:	f000 f993 	bl	8006140 <_malloc_r>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	b140      	cbz	r0, 8005e30 <__sfmoreglue+0x28>
 8005e1e:	2100      	movs	r1, #0
 8005e20:	e9c0 1600 	strd	r1, r6, [r0]
 8005e24:	300c      	adds	r0, #12
 8005e26:	60a0      	str	r0, [r4, #8]
 8005e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e2c:	f7ff fda6 	bl	800597c <memset>
 8005e30:	4620      	mov	r0, r4
 8005e32:	bd70      	pop	{r4, r5, r6, pc}

08005e34 <__sfp_lock_acquire>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__sfp_lock_acquire+0x8>)
 8005e36:	f000 b8b3 	b.w	8005fa0 <__retarget_lock_acquire_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	2000050d 	.word	0x2000050d

08005e40 <__sfp_lock_release>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__sfp_lock_release+0x8>)
 8005e42:	f000 b8ae 	b.w	8005fa2 <__retarget_lock_release_recursive>
 8005e46:	bf00      	nop
 8005e48:	2000050d 	.word	0x2000050d

08005e4c <__sinit_lock_acquire>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	; (8005e54 <__sinit_lock_acquire+0x8>)
 8005e4e:	f000 b8a7 	b.w	8005fa0 <__retarget_lock_acquire_recursive>
 8005e52:	bf00      	nop
 8005e54:	2000050e 	.word	0x2000050e

08005e58 <__sinit_lock_release>:
 8005e58:	4801      	ldr	r0, [pc, #4]	; (8005e60 <__sinit_lock_release+0x8>)
 8005e5a:	f000 b8a2 	b.w	8005fa2 <__retarget_lock_release_recursive>
 8005e5e:	bf00      	nop
 8005e60:	2000050e 	.word	0x2000050e

08005e64 <__sinit>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4604      	mov	r4, r0
 8005e68:	f7ff fff0 	bl	8005e4c <__sinit_lock_acquire>
 8005e6c:	69a3      	ldr	r3, [r4, #24]
 8005e6e:	b11b      	cbz	r3, 8005e78 <__sinit+0x14>
 8005e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e74:	f7ff bff0 	b.w	8005e58 <__sinit_lock_release>
 8005e78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e7c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <__sinit+0x68>)
 8005e80:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <__sinit+0x6c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e86:	42a3      	cmp	r3, r4
 8005e88:	bf08      	it	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	bf08      	it	eq
 8005e90:	61a3      	streq	r3, [r4, #24]
 8005e92:	f000 f81f 	bl	8005ed4 <__sfp>
 8005e96:	6060      	str	r0, [r4, #4]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f81b 	bl	8005ed4 <__sfp>
 8005e9e:	60a0      	str	r0, [r4, #8]
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f817 	bl	8005ed4 <__sfp>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2104      	movs	r1, #4
 8005eaa:	60e0      	str	r0, [r4, #12]
 8005eac:	6860      	ldr	r0, [r4, #4]
 8005eae:	f7ff ff81 	bl	8005db4 <std>
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	2109      	movs	r1, #9
 8005eb6:	68a0      	ldr	r0, [r4, #8]
 8005eb8:	f7ff ff7c 	bl	8005db4 <std>
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	2112      	movs	r1, #18
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	f7ff ff77 	bl	8005db4 <std>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61a3      	str	r3, [r4, #24]
 8005eca:	e7d1      	b.n	8005e70 <__sinit+0xc>
 8005ecc:	08006aec 	.word	0x08006aec
 8005ed0:	08005dfd 	.word	0x08005dfd

08005ed4 <__sfp>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	f7ff ffac 	bl	8005e34 <__sfp_lock_acquire>
 8005edc:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <__sfp+0x84>)
 8005ede:	681e      	ldr	r6, [r3, #0]
 8005ee0:	69b3      	ldr	r3, [r6, #24]
 8005ee2:	b913      	cbnz	r3, 8005eea <__sfp+0x16>
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7ff ffbd 	bl	8005e64 <__sinit>
 8005eea:	3648      	adds	r6, #72	; 0x48
 8005eec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	d503      	bpl.n	8005efc <__sfp+0x28>
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	b30b      	cbz	r3, 8005f3c <__sfp+0x68>
 8005ef8:	6836      	ldr	r6, [r6, #0]
 8005efa:	e7f7      	b.n	8005eec <__sfp+0x18>
 8005efc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f00:	b9d5      	cbnz	r5, 8005f38 <__sfp+0x64>
 8005f02:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <__sfp+0x88>)
 8005f04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f08:	60e3      	str	r3, [r4, #12]
 8005f0a:	6665      	str	r5, [r4, #100]	; 0x64
 8005f0c:	f000 f847 	bl	8005f9e <__retarget_lock_init_recursive>
 8005f10:	f7ff ff96 	bl	8005e40 <__sfp_lock_release>
 8005f14:	2208      	movs	r2, #8
 8005f16:	4629      	mov	r1, r5
 8005f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f20:	6025      	str	r5, [r4, #0]
 8005f22:	61a5      	str	r5, [r4, #24]
 8005f24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f28:	f7ff fd28 	bl	800597c <memset>
 8005f2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f34:	4620      	mov	r0, r4
 8005f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f38:	3468      	adds	r4, #104	; 0x68
 8005f3a:	e7d9      	b.n	8005ef0 <__sfp+0x1c>
 8005f3c:	2104      	movs	r1, #4
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff ff62 	bl	8005e08 <__sfmoreglue>
 8005f44:	4604      	mov	r4, r0
 8005f46:	6030      	str	r0, [r6, #0]
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d1d5      	bne.n	8005ef8 <__sfp+0x24>
 8005f4c:	f7ff ff78 	bl	8005e40 <__sfp_lock_release>
 8005f50:	230c      	movs	r3, #12
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	e7ee      	b.n	8005f34 <__sfp+0x60>
 8005f56:	bf00      	nop
 8005f58:	08006aec 	.word	0x08006aec
 8005f5c:	ffff0001 	.word	0xffff0001

08005f60 <_fwalk_reent>:
 8005f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f64:	4606      	mov	r6, r0
 8005f66:	4688      	mov	r8, r1
 8005f68:	2700      	movs	r7, #0
 8005f6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f72:	f1b9 0901 	subs.w	r9, r9, #1
 8005f76:	d505      	bpl.n	8005f84 <_fwalk_reent+0x24>
 8005f78:	6824      	ldr	r4, [r4, #0]
 8005f7a:	2c00      	cmp	r4, #0
 8005f7c:	d1f7      	bne.n	8005f6e <_fwalk_reent+0xe>
 8005f7e:	4638      	mov	r0, r7
 8005f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f84:	89ab      	ldrh	r3, [r5, #12]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d907      	bls.n	8005f9a <_fwalk_reent+0x3a>
 8005f8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	d003      	beq.n	8005f9a <_fwalk_reent+0x3a>
 8005f92:	4629      	mov	r1, r5
 8005f94:	4630      	mov	r0, r6
 8005f96:	47c0      	blx	r8
 8005f98:	4307      	orrs	r7, r0
 8005f9a:	3568      	adds	r5, #104	; 0x68
 8005f9c:	e7e9      	b.n	8005f72 <_fwalk_reent+0x12>

08005f9e <__retarget_lock_init_recursive>:
 8005f9e:	4770      	bx	lr

08005fa0 <__retarget_lock_acquire_recursive>:
 8005fa0:	4770      	bx	lr

08005fa2 <__retarget_lock_release_recursive>:
 8005fa2:	4770      	bx	lr

08005fa4 <__swhatbuf_r>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	460e      	mov	r6, r1
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	4614      	mov	r4, r2
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	b096      	sub	sp, #88	; 0x58
 8005fb4:	da08      	bge.n	8005fc8 <__swhatbuf_r+0x24>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	061a      	lsls	r2, r3, #24
 8005fc0:	d410      	bmi.n	8005fe4 <__swhatbuf_r+0x40>
 8005fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc6:	e00e      	b.n	8005fe6 <__swhatbuf_r+0x42>
 8005fc8:	466a      	mov	r2, sp
 8005fca:	f000 fc91 	bl	80068f0 <_fstat_r>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	dbf1      	blt.n	8005fb6 <__swhatbuf_r+0x12>
 8005fd2:	9a01      	ldr	r2, [sp, #4]
 8005fd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fdc:	425a      	negs	r2, r3
 8005fde:	415a      	adcs	r2, r3
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	e7ee      	b.n	8005fc2 <__swhatbuf_r+0x1e>
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	b016      	add	sp, #88	; 0x58
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ff0 <__smakebuf_r>:
 8005ff0:	898b      	ldrh	r3, [r1, #12]
 8005ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ff4:	079d      	lsls	r5, r3, #30
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	d507      	bpl.n	800600c <__smakebuf_r+0x1c>
 8005ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2301      	movs	r3, #1
 8006006:	6163      	str	r3, [r4, #20]
 8006008:	b002      	add	sp, #8
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	466a      	mov	r2, sp
 800600e:	ab01      	add	r3, sp, #4
 8006010:	f7ff ffc8 	bl	8005fa4 <__swhatbuf_r>
 8006014:	9900      	ldr	r1, [sp, #0]
 8006016:	4605      	mov	r5, r0
 8006018:	4630      	mov	r0, r6
 800601a:	f000 f891 	bl	8006140 <_malloc_r>
 800601e:	b948      	cbnz	r0, 8006034 <__smakebuf_r+0x44>
 8006020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006024:	059a      	lsls	r2, r3, #22
 8006026:	d4ef      	bmi.n	8006008 <__smakebuf_r+0x18>
 8006028:	f023 0303 	bic.w	r3, r3, #3
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	e7e3      	b.n	8005ffc <__smakebuf_r+0xc>
 8006034:	4b0d      	ldr	r3, [pc, #52]	; (800606c <__smakebuf_r+0x7c>)
 8006036:	62b3      	str	r3, [r6, #40]	; 0x28
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	6020      	str	r0, [r4, #0]
 800603c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	9b00      	ldr	r3, [sp, #0]
 8006044:	6120      	str	r0, [r4, #16]
 8006046:	6163      	str	r3, [r4, #20]
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	b15b      	cbz	r3, 8006064 <__smakebuf_r+0x74>
 800604c:	4630      	mov	r0, r6
 800604e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006052:	f000 fc5f 	bl	8006914 <_isatty_r>
 8006056:	b128      	cbz	r0, 8006064 <__smakebuf_r+0x74>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	89a0      	ldrh	r0, [r4, #12]
 8006066:	4305      	orrs	r5, r0
 8006068:	81a5      	strh	r5, [r4, #12]
 800606a:	e7cd      	b.n	8006008 <__smakebuf_r+0x18>
 800606c:	08005dfd 	.word	0x08005dfd

08006070 <_free_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	2900      	cmp	r1, #0
 8006076:	d040      	beq.n	80060fa <_free_r+0x8a>
 8006078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607c:	1f0c      	subs	r4, r1, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfb8      	it	lt
 8006082:	18e4      	addlt	r4, r4, r3
 8006084:	f000 fc76 	bl	8006974 <__malloc_lock>
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <_free_r+0x8c>)
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	b933      	cbnz	r3, 800609c <_free_r+0x2c>
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	6014      	str	r4, [r2, #0]
 8006092:	4628      	mov	r0, r5
 8006094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006098:	f000 bc72 	b.w	8006980 <__malloc_unlock>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d908      	bls.n	80060b2 <_free_r+0x42>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	1821      	adds	r1, r4, r0
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf01      	itttt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	1809      	addeq	r1, r1, r0
 80060ae:	6021      	streq	r1, [r4, #0]
 80060b0:	e7ed      	b.n	800608e <_free_r+0x1e>
 80060b2:	461a      	mov	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b10b      	cbz	r3, 80060bc <_free_r+0x4c>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d9fa      	bls.n	80060b2 <_free_r+0x42>
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	1850      	adds	r0, r2, r1
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d10b      	bne.n	80060dc <_free_r+0x6c>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	4401      	add	r1, r0
 80060c8:	1850      	adds	r0, r2, r1
 80060ca:	4283      	cmp	r3, r0
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	d1e0      	bne.n	8006092 <_free_r+0x22>
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	4401      	add	r1, r0
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	e7da      	b.n	8006092 <_free_r+0x22>
 80060dc:	d902      	bls.n	80060e4 <_free_r+0x74>
 80060de:	230c      	movs	r3, #12
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	e7d6      	b.n	8006092 <_free_r+0x22>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	1821      	adds	r1, r4, r0
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf01      	itttt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	1809      	addeq	r1, r1, r0
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	6054      	str	r4, [r2, #4]
 80060f8:	e7cb      	b.n	8006092 <_free_r+0x22>
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	20000510 	.word	0x20000510

08006100 <sbrk_aligned>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4e0e      	ldr	r6, [pc, #56]	; (800613c <sbrk_aligned+0x3c>)
 8006104:	460c      	mov	r4, r1
 8006106:	6831      	ldr	r1, [r6, #0]
 8006108:	4605      	mov	r5, r0
 800610a:	b911      	cbnz	r1, 8006112 <sbrk_aligned+0x12>
 800610c:	f000 fb7a 	bl	8006804 <_sbrk_r>
 8006110:	6030      	str	r0, [r6, #0]
 8006112:	4621      	mov	r1, r4
 8006114:	4628      	mov	r0, r5
 8006116:	f000 fb75 	bl	8006804 <_sbrk_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	d00a      	beq.n	8006134 <sbrk_aligned+0x34>
 800611e:	1cc4      	adds	r4, r0, #3
 8006120:	f024 0403 	bic.w	r4, r4, #3
 8006124:	42a0      	cmp	r0, r4
 8006126:	d007      	beq.n	8006138 <sbrk_aligned+0x38>
 8006128:	1a21      	subs	r1, r4, r0
 800612a:	4628      	mov	r0, r5
 800612c:	f000 fb6a 	bl	8006804 <_sbrk_r>
 8006130:	3001      	adds	r0, #1
 8006132:	d101      	bne.n	8006138 <sbrk_aligned+0x38>
 8006134:	f04f 34ff 	mov.w	r4, #4294967295
 8006138:	4620      	mov	r0, r4
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	20000514 	.word	0x20000514

08006140 <_malloc_r>:
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006144:	1ccd      	adds	r5, r1, #3
 8006146:	f025 0503 	bic.w	r5, r5, #3
 800614a:	3508      	adds	r5, #8
 800614c:	2d0c      	cmp	r5, #12
 800614e:	bf38      	it	cc
 8006150:	250c      	movcc	r5, #12
 8006152:	2d00      	cmp	r5, #0
 8006154:	4607      	mov	r7, r0
 8006156:	db01      	blt.n	800615c <_malloc_r+0x1c>
 8006158:	42a9      	cmp	r1, r5
 800615a:	d905      	bls.n	8006168 <_malloc_r+0x28>
 800615c:	230c      	movs	r3, #12
 800615e:	2600      	movs	r6, #0
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4630      	mov	r0, r6
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	4e2e      	ldr	r6, [pc, #184]	; (8006224 <_malloc_r+0xe4>)
 800616a:	f000 fc03 	bl	8006974 <__malloc_lock>
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	461c      	mov	r4, r3
 8006172:	bb34      	cbnz	r4, 80061c2 <_malloc_r+0x82>
 8006174:	4629      	mov	r1, r5
 8006176:	4638      	mov	r0, r7
 8006178:	f7ff ffc2 	bl	8006100 <sbrk_aligned>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	4604      	mov	r4, r0
 8006180:	d14d      	bne.n	800621e <_malloc_r+0xde>
 8006182:	6834      	ldr	r4, [r6, #0]
 8006184:	4626      	mov	r6, r4
 8006186:	2e00      	cmp	r6, #0
 8006188:	d140      	bne.n	800620c <_malloc_r+0xcc>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	4631      	mov	r1, r6
 800618e:	4638      	mov	r0, r7
 8006190:	eb04 0803 	add.w	r8, r4, r3
 8006194:	f000 fb36 	bl	8006804 <_sbrk_r>
 8006198:	4580      	cmp	r8, r0
 800619a:	d13a      	bne.n	8006212 <_malloc_r+0xd2>
 800619c:	6821      	ldr	r1, [r4, #0]
 800619e:	3503      	adds	r5, #3
 80061a0:	1a6d      	subs	r5, r5, r1
 80061a2:	f025 0503 	bic.w	r5, r5, #3
 80061a6:	3508      	adds	r5, #8
 80061a8:	2d0c      	cmp	r5, #12
 80061aa:	bf38      	it	cc
 80061ac:	250c      	movcc	r5, #12
 80061ae:	4638      	mov	r0, r7
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7ff ffa5 	bl	8006100 <sbrk_aligned>
 80061b6:	3001      	adds	r0, #1
 80061b8:	d02b      	beq.n	8006212 <_malloc_r+0xd2>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	442b      	add	r3, r5
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	e00e      	b.n	80061e0 <_malloc_r+0xa0>
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	1b52      	subs	r2, r2, r5
 80061c6:	d41e      	bmi.n	8006206 <_malloc_r+0xc6>
 80061c8:	2a0b      	cmp	r2, #11
 80061ca:	d916      	bls.n	80061fa <_malloc_r+0xba>
 80061cc:	1961      	adds	r1, r4, r5
 80061ce:	42a3      	cmp	r3, r4
 80061d0:	6025      	str	r5, [r4, #0]
 80061d2:	bf18      	it	ne
 80061d4:	6059      	strne	r1, [r3, #4]
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	bf08      	it	eq
 80061da:	6031      	streq	r1, [r6, #0]
 80061dc:	5162      	str	r2, [r4, r5]
 80061de:	604b      	str	r3, [r1, #4]
 80061e0:	4638      	mov	r0, r7
 80061e2:	f104 060b 	add.w	r6, r4, #11
 80061e6:	f000 fbcb 	bl	8006980 <__malloc_unlock>
 80061ea:	f026 0607 	bic.w	r6, r6, #7
 80061ee:	1d23      	adds	r3, r4, #4
 80061f0:	1af2      	subs	r2, r6, r3
 80061f2:	d0b6      	beq.n	8006162 <_malloc_r+0x22>
 80061f4:	1b9b      	subs	r3, r3, r6
 80061f6:	50a3      	str	r3, [r4, r2]
 80061f8:	e7b3      	b.n	8006162 <_malloc_r+0x22>
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	bf0c      	ite	eq
 8006200:	6032      	streq	r2, [r6, #0]
 8006202:	605a      	strne	r2, [r3, #4]
 8006204:	e7ec      	b.n	80061e0 <_malloc_r+0xa0>
 8006206:	4623      	mov	r3, r4
 8006208:	6864      	ldr	r4, [r4, #4]
 800620a:	e7b2      	b.n	8006172 <_malloc_r+0x32>
 800620c:	4634      	mov	r4, r6
 800620e:	6876      	ldr	r6, [r6, #4]
 8006210:	e7b9      	b.n	8006186 <_malloc_r+0x46>
 8006212:	230c      	movs	r3, #12
 8006214:	4638      	mov	r0, r7
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	f000 fbb2 	bl	8006980 <__malloc_unlock>
 800621c:	e7a1      	b.n	8006162 <_malloc_r+0x22>
 800621e:	6025      	str	r5, [r4, #0]
 8006220:	e7de      	b.n	80061e0 <_malloc_r+0xa0>
 8006222:	bf00      	nop
 8006224:	20000510 	.word	0x20000510

08006228 <__sfputc_r>:
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	b410      	push	{r4}
 800622c:	3b01      	subs	r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	6093      	str	r3, [r2, #8]
 8006232:	da07      	bge.n	8006244 <__sfputc_r+0x1c>
 8006234:	6994      	ldr	r4, [r2, #24]
 8006236:	42a3      	cmp	r3, r4
 8006238:	db01      	blt.n	800623e <__sfputc_r+0x16>
 800623a:	290a      	cmp	r1, #10
 800623c:	d102      	bne.n	8006244 <__sfputc_r+0x1c>
 800623e:	bc10      	pop	{r4}
 8006240:	f7ff bc3a 	b.w	8005ab8 <__swbuf_r>
 8006244:	6813      	ldr	r3, [r2, #0]
 8006246:	1c58      	adds	r0, r3, #1
 8006248:	6010      	str	r0, [r2, #0]
 800624a:	7019      	strb	r1, [r3, #0]
 800624c:	4608      	mov	r0, r1
 800624e:	bc10      	pop	{r4}
 8006250:	4770      	bx	lr

08006252 <__sfputs_r>:
 8006252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	4614      	mov	r4, r2
 800625a:	18d5      	adds	r5, r2, r3
 800625c:	42ac      	cmp	r4, r5
 800625e:	d101      	bne.n	8006264 <__sfputs_r+0x12>
 8006260:	2000      	movs	r0, #0
 8006262:	e007      	b.n	8006274 <__sfputs_r+0x22>
 8006264:	463a      	mov	r2, r7
 8006266:	4630      	mov	r0, r6
 8006268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626c:	f7ff ffdc 	bl	8006228 <__sfputc_r>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d1f3      	bne.n	800625c <__sfputs_r+0xa>
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006278 <_vfiprintf_r>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	460d      	mov	r5, r1
 800627e:	4614      	mov	r4, r2
 8006280:	4698      	mov	r8, r3
 8006282:	4606      	mov	r6, r0
 8006284:	b09d      	sub	sp, #116	; 0x74
 8006286:	b118      	cbz	r0, 8006290 <_vfiprintf_r+0x18>
 8006288:	6983      	ldr	r3, [r0, #24]
 800628a:	b90b      	cbnz	r3, 8006290 <_vfiprintf_r+0x18>
 800628c:	f7ff fdea 	bl	8005e64 <__sinit>
 8006290:	4b89      	ldr	r3, [pc, #548]	; (80064b8 <_vfiprintf_r+0x240>)
 8006292:	429d      	cmp	r5, r3
 8006294:	d11b      	bne.n	80062ce <_vfiprintf_r+0x56>
 8006296:	6875      	ldr	r5, [r6, #4]
 8006298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800629a:	07d9      	lsls	r1, r3, #31
 800629c:	d405      	bmi.n	80062aa <_vfiprintf_r+0x32>
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	059a      	lsls	r2, r3, #22
 80062a2:	d402      	bmi.n	80062aa <_vfiprintf_r+0x32>
 80062a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a6:	f7ff fe7b 	bl	8005fa0 <__retarget_lock_acquire_recursive>
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	071b      	lsls	r3, r3, #28
 80062ae:	d501      	bpl.n	80062b4 <_vfiprintf_r+0x3c>
 80062b0:	692b      	ldr	r3, [r5, #16]
 80062b2:	b9eb      	cbnz	r3, 80062f0 <_vfiprintf_r+0x78>
 80062b4:	4629      	mov	r1, r5
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff fc50 	bl	8005b5c <__swsetup_r>
 80062bc:	b1c0      	cbz	r0, 80062f0 <_vfiprintf_r+0x78>
 80062be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c0:	07dc      	lsls	r4, r3, #31
 80062c2:	d50e      	bpl.n	80062e2 <_vfiprintf_r+0x6a>
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	b01d      	add	sp, #116	; 0x74
 80062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ce:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <_vfiprintf_r+0x244>)
 80062d0:	429d      	cmp	r5, r3
 80062d2:	d101      	bne.n	80062d8 <_vfiprintf_r+0x60>
 80062d4:	68b5      	ldr	r5, [r6, #8]
 80062d6:	e7df      	b.n	8006298 <_vfiprintf_r+0x20>
 80062d8:	4b79      	ldr	r3, [pc, #484]	; (80064c0 <_vfiprintf_r+0x248>)
 80062da:	429d      	cmp	r5, r3
 80062dc:	bf08      	it	eq
 80062de:	68f5      	ldreq	r5, [r6, #12]
 80062e0:	e7da      	b.n	8006298 <_vfiprintf_r+0x20>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	0598      	lsls	r0, r3, #22
 80062e6:	d4ed      	bmi.n	80062c4 <_vfiprintf_r+0x4c>
 80062e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ea:	f7ff fe5a 	bl	8005fa2 <__retarget_lock_release_recursive>
 80062ee:	e7e9      	b.n	80062c4 <_vfiprintf_r+0x4c>
 80062f0:	2300      	movs	r3, #0
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	2320      	movs	r3, #32
 80062f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fa:	2330      	movs	r3, #48	; 0x30
 80062fc:	f04f 0901 	mov.w	r9, #1
 8006300:	f8cd 800c 	str.w	r8, [sp, #12]
 8006304:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80064c4 <_vfiprintf_r+0x24c>
 8006308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800630c:	4623      	mov	r3, r4
 800630e:	469a      	mov	sl, r3
 8006310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006314:	b10a      	cbz	r2, 800631a <_vfiprintf_r+0xa2>
 8006316:	2a25      	cmp	r2, #37	; 0x25
 8006318:	d1f9      	bne.n	800630e <_vfiprintf_r+0x96>
 800631a:	ebba 0b04 	subs.w	fp, sl, r4
 800631e:	d00b      	beq.n	8006338 <_vfiprintf_r+0xc0>
 8006320:	465b      	mov	r3, fp
 8006322:	4622      	mov	r2, r4
 8006324:	4629      	mov	r1, r5
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ff93 	bl	8006252 <__sfputs_r>
 800632c:	3001      	adds	r0, #1
 800632e:	f000 80aa 	beq.w	8006486 <_vfiprintf_r+0x20e>
 8006332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006334:	445a      	add	r2, fp
 8006336:	9209      	str	r2, [sp, #36]	; 0x24
 8006338:	f89a 3000 	ldrb.w	r3, [sl]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80a2 	beq.w	8006486 <_vfiprintf_r+0x20e>
 8006342:	2300      	movs	r3, #0
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800634c:	f10a 0a01 	add.w	sl, sl, #1
 8006350:	9304      	str	r3, [sp, #16]
 8006352:	9307      	str	r3, [sp, #28]
 8006354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006358:	931a      	str	r3, [sp, #104]	; 0x68
 800635a:	4654      	mov	r4, sl
 800635c:	2205      	movs	r2, #5
 800635e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006362:	4858      	ldr	r0, [pc, #352]	; (80064c4 <_vfiprintf_r+0x24c>)
 8006364:	f000 faf8 	bl	8006958 <memchr>
 8006368:	9a04      	ldr	r2, [sp, #16]
 800636a:	b9d8      	cbnz	r0, 80063a4 <_vfiprintf_r+0x12c>
 800636c:	06d1      	lsls	r1, r2, #27
 800636e:	bf44      	itt	mi
 8006370:	2320      	movmi	r3, #32
 8006372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006376:	0713      	lsls	r3, r2, #28
 8006378:	bf44      	itt	mi
 800637a:	232b      	movmi	r3, #43	; 0x2b
 800637c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006380:	f89a 3000 	ldrb.w	r3, [sl]
 8006384:	2b2a      	cmp	r3, #42	; 0x2a
 8006386:	d015      	beq.n	80063b4 <_vfiprintf_r+0x13c>
 8006388:	4654      	mov	r4, sl
 800638a:	2000      	movs	r0, #0
 800638c:	f04f 0c0a 	mov.w	ip, #10
 8006390:	9a07      	ldr	r2, [sp, #28]
 8006392:	4621      	mov	r1, r4
 8006394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006398:	3b30      	subs	r3, #48	; 0x30
 800639a:	2b09      	cmp	r3, #9
 800639c:	d94e      	bls.n	800643c <_vfiprintf_r+0x1c4>
 800639e:	b1b0      	cbz	r0, 80063ce <_vfiprintf_r+0x156>
 80063a0:	9207      	str	r2, [sp, #28]
 80063a2:	e014      	b.n	80063ce <_vfiprintf_r+0x156>
 80063a4:	eba0 0308 	sub.w	r3, r0, r8
 80063a8:	fa09 f303 	lsl.w	r3, r9, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	46a2      	mov	sl, r4
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	e7d2      	b.n	800635a <_vfiprintf_r+0xe2>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	1d19      	adds	r1, r3, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	9103      	str	r1, [sp, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bfbb      	ittet	lt
 80063c0:	425b      	neglt	r3, r3
 80063c2:	f042 0202 	orrlt.w	r2, r2, #2
 80063c6:	9307      	strge	r3, [sp, #28]
 80063c8:	9307      	strlt	r3, [sp, #28]
 80063ca:	bfb8      	it	lt
 80063cc:	9204      	strlt	r2, [sp, #16]
 80063ce:	7823      	ldrb	r3, [r4, #0]
 80063d0:	2b2e      	cmp	r3, #46	; 0x2e
 80063d2:	d10c      	bne.n	80063ee <_vfiprintf_r+0x176>
 80063d4:	7863      	ldrb	r3, [r4, #1]
 80063d6:	2b2a      	cmp	r3, #42	; 0x2a
 80063d8:	d135      	bne.n	8006446 <_vfiprintf_r+0x1ce>
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	3402      	adds	r4, #2
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	9203      	str	r2, [sp, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bfb8      	it	lt
 80063e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ec:	9305      	str	r3, [sp, #20]
 80063ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80064c8 <_vfiprintf_r+0x250>
 80063f2:	2203      	movs	r2, #3
 80063f4:	4650      	mov	r0, sl
 80063f6:	7821      	ldrb	r1, [r4, #0]
 80063f8:	f000 faae 	bl	8006958 <memchr>
 80063fc:	b140      	cbz	r0, 8006410 <_vfiprintf_r+0x198>
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	eba0 000a 	sub.w	r0, r0, sl
 8006404:	fa03 f000 	lsl.w	r0, r3, r0
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	3401      	adds	r4, #1
 800640c:	4303      	orrs	r3, r0
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006414:	2206      	movs	r2, #6
 8006416:	482d      	ldr	r0, [pc, #180]	; (80064cc <_vfiprintf_r+0x254>)
 8006418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800641c:	f000 fa9c 	bl	8006958 <memchr>
 8006420:	2800      	cmp	r0, #0
 8006422:	d03f      	beq.n	80064a4 <_vfiprintf_r+0x22c>
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <_vfiprintf_r+0x258>)
 8006426:	bb1b      	cbnz	r3, 8006470 <_vfiprintf_r+0x1f8>
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	3307      	adds	r3, #7
 800642c:	f023 0307 	bic.w	r3, r3, #7
 8006430:	3308      	adds	r3, #8
 8006432:	9303      	str	r3, [sp, #12]
 8006434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006436:	443b      	add	r3, r7
 8006438:	9309      	str	r3, [sp, #36]	; 0x24
 800643a:	e767      	b.n	800630c <_vfiprintf_r+0x94>
 800643c:	460c      	mov	r4, r1
 800643e:	2001      	movs	r0, #1
 8006440:	fb0c 3202 	mla	r2, ip, r2, r3
 8006444:	e7a5      	b.n	8006392 <_vfiprintf_r+0x11a>
 8006446:	2300      	movs	r3, #0
 8006448:	f04f 0c0a 	mov.w	ip, #10
 800644c:	4619      	mov	r1, r3
 800644e:	3401      	adds	r4, #1
 8006450:	9305      	str	r3, [sp, #20]
 8006452:	4620      	mov	r0, r4
 8006454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006458:	3a30      	subs	r2, #48	; 0x30
 800645a:	2a09      	cmp	r2, #9
 800645c:	d903      	bls.n	8006466 <_vfiprintf_r+0x1ee>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0c5      	beq.n	80063ee <_vfiprintf_r+0x176>
 8006462:	9105      	str	r1, [sp, #20]
 8006464:	e7c3      	b.n	80063ee <_vfiprintf_r+0x176>
 8006466:	4604      	mov	r4, r0
 8006468:	2301      	movs	r3, #1
 800646a:	fb0c 2101 	mla	r1, ip, r1, r2
 800646e:	e7f0      	b.n	8006452 <_vfiprintf_r+0x1da>
 8006470:	ab03      	add	r3, sp, #12
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	462a      	mov	r2, r5
 8006476:	4630      	mov	r0, r6
 8006478:	4b16      	ldr	r3, [pc, #88]	; (80064d4 <_vfiprintf_r+0x25c>)
 800647a:	a904      	add	r1, sp, #16
 800647c:	f3af 8000 	nop.w
 8006480:	4607      	mov	r7, r0
 8006482:	1c78      	adds	r0, r7, #1
 8006484:	d1d6      	bne.n	8006434 <_vfiprintf_r+0x1bc>
 8006486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006488:	07d9      	lsls	r1, r3, #31
 800648a:	d405      	bmi.n	8006498 <_vfiprintf_r+0x220>
 800648c:	89ab      	ldrh	r3, [r5, #12]
 800648e:	059a      	lsls	r2, r3, #22
 8006490:	d402      	bmi.n	8006498 <_vfiprintf_r+0x220>
 8006492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006494:	f7ff fd85 	bl	8005fa2 <__retarget_lock_release_recursive>
 8006498:	89ab      	ldrh	r3, [r5, #12]
 800649a:	065b      	lsls	r3, r3, #25
 800649c:	f53f af12 	bmi.w	80062c4 <_vfiprintf_r+0x4c>
 80064a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a2:	e711      	b.n	80062c8 <_vfiprintf_r+0x50>
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	462a      	mov	r2, r5
 80064aa:	4630      	mov	r0, r6
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <_vfiprintf_r+0x25c>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	f000 f882 	bl	80065b8 <_printf_i>
 80064b4:	e7e4      	b.n	8006480 <_vfiprintf_r+0x208>
 80064b6:	bf00      	nop
 80064b8:	08006b10 	.word	0x08006b10
 80064bc:	08006b30 	.word	0x08006b30
 80064c0:	08006af0 	.word	0x08006af0
 80064c4:	08006b50 	.word	0x08006b50
 80064c8:	08006b56 	.word	0x08006b56
 80064cc:	08006b5a 	.word	0x08006b5a
 80064d0:	00000000 	.word	0x00000000
 80064d4:	08006253 	.word	0x08006253

080064d8 <_printf_common>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	4616      	mov	r6, r2
 80064de:	4699      	mov	r9, r3
 80064e0:	688a      	ldr	r2, [r1, #8]
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	4607      	mov	r7, r0
 80064e6:	4293      	cmp	r3, r2
 80064e8:	bfb8      	it	lt
 80064ea:	4613      	movlt	r3, r2
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064f2:	460c      	mov	r4, r1
 80064f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064f8:	b10a      	cbz	r2, 80064fe <_printf_common+0x26>
 80064fa:	3301      	adds	r3, #1
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0699      	lsls	r1, r3, #26
 8006502:	bf42      	ittt	mi
 8006504:	6833      	ldrmi	r3, [r6, #0]
 8006506:	3302      	addmi	r3, #2
 8006508:	6033      	strmi	r3, [r6, #0]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d106      	bne.n	8006520 <_printf_common+0x48>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	6832      	ldr	r2, [r6, #0]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc28      	bgt.n	8006572 <_printf_common+0x9a>
 8006520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006524:	1e13      	subs	r3, r2, #0
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	bf18      	it	ne
 800652a:	2301      	movne	r3, #1
 800652c:	0692      	lsls	r2, r2, #26
 800652e:	d42d      	bmi.n	800658c <_printf_common+0xb4>
 8006530:	4649      	mov	r1, r9
 8006532:	4638      	mov	r0, r7
 8006534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d020      	beq.n	8006580 <_printf_common+0xa8>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	68e5      	ldr	r5, [r4, #12]
 8006542:	f003 0306 	and.w	r3, r3, #6
 8006546:	2b04      	cmp	r3, #4
 8006548:	bf18      	it	ne
 800654a:	2500      	movne	r5, #0
 800654c:	6832      	ldr	r2, [r6, #0]
 800654e:	f04f 0600 	mov.w	r6, #0
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	bf08      	it	eq
 8006556:	1aad      	subeq	r5, r5, r2
 8006558:	6922      	ldr	r2, [r4, #16]
 800655a:	bf08      	it	eq
 800655c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006560:	4293      	cmp	r3, r2
 8006562:	bfc4      	itt	gt
 8006564:	1a9b      	subgt	r3, r3, r2
 8006566:	18ed      	addgt	r5, r5, r3
 8006568:	341a      	adds	r4, #26
 800656a:	42b5      	cmp	r5, r6
 800656c:	d11a      	bne.n	80065a4 <_printf_common+0xcc>
 800656e:	2000      	movs	r0, #0
 8006570:	e008      	b.n	8006584 <_printf_common+0xac>
 8006572:	2301      	movs	r3, #1
 8006574:	4652      	mov	r2, sl
 8006576:	4649      	mov	r1, r9
 8006578:	4638      	mov	r0, r7
 800657a:	47c0      	blx	r8
 800657c:	3001      	adds	r0, #1
 800657e:	d103      	bne.n	8006588 <_printf_common+0xb0>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006588:	3501      	adds	r5, #1
 800658a:	e7c4      	b.n	8006516 <_printf_common+0x3e>
 800658c:	2030      	movs	r0, #48	; 0x30
 800658e:	18e1      	adds	r1, r4, r3
 8006590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800659a:	4422      	add	r2, r4
 800659c:	3302      	adds	r3, #2
 800659e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a2:	e7c5      	b.n	8006530 <_printf_common+0x58>
 80065a4:	2301      	movs	r3, #1
 80065a6:	4622      	mov	r2, r4
 80065a8:	4649      	mov	r1, r9
 80065aa:	4638      	mov	r0, r7
 80065ac:	47c0      	blx	r8
 80065ae:	3001      	adds	r0, #1
 80065b0:	d0e6      	beq.n	8006580 <_printf_common+0xa8>
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7d9      	b.n	800656a <_printf_common+0x92>
	...

080065b8 <_printf_i>:
 80065b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	7e0f      	ldrb	r7, [r1, #24]
 80065be:	4691      	mov	r9, r2
 80065c0:	2f78      	cmp	r7, #120	; 0x78
 80065c2:	4680      	mov	r8, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	469a      	mov	sl, r3
 80065c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ce:	d807      	bhi.n	80065e0 <_printf_i+0x28>
 80065d0:	2f62      	cmp	r7, #98	; 0x62
 80065d2:	d80a      	bhi.n	80065ea <_printf_i+0x32>
 80065d4:	2f00      	cmp	r7, #0
 80065d6:	f000 80d9 	beq.w	800678c <_printf_i+0x1d4>
 80065da:	2f58      	cmp	r7, #88	; 0x58
 80065dc:	f000 80a4 	beq.w	8006728 <_printf_i+0x170>
 80065e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065e8:	e03a      	b.n	8006660 <_printf_i+0xa8>
 80065ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ee:	2b15      	cmp	r3, #21
 80065f0:	d8f6      	bhi.n	80065e0 <_printf_i+0x28>
 80065f2:	a101      	add	r1, pc, #4	; (adr r1, 80065f8 <_printf_i+0x40>)
 80065f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f8:	08006651 	.word	0x08006651
 80065fc:	08006665 	.word	0x08006665
 8006600:	080065e1 	.word	0x080065e1
 8006604:	080065e1 	.word	0x080065e1
 8006608:	080065e1 	.word	0x080065e1
 800660c:	080065e1 	.word	0x080065e1
 8006610:	08006665 	.word	0x08006665
 8006614:	080065e1 	.word	0x080065e1
 8006618:	080065e1 	.word	0x080065e1
 800661c:	080065e1 	.word	0x080065e1
 8006620:	080065e1 	.word	0x080065e1
 8006624:	08006773 	.word	0x08006773
 8006628:	08006695 	.word	0x08006695
 800662c:	08006755 	.word	0x08006755
 8006630:	080065e1 	.word	0x080065e1
 8006634:	080065e1 	.word	0x080065e1
 8006638:	08006795 	.word	0x08006795
 800663c:	080065e1 	.word	0x080065e1
 8006640:	08006695 	.word	0x08006695
 8006644:	080065e1 	.word	0x080065e1
 8006648:	080065e1 	.word	0x080065e1
 800664c:	0800675d 	.word	0x0800675d
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	602a      	str	r2, [r5, #0]
 8006658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800665c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006660:	2301      	movs	r3, #1
 8006662:	e0a4      	b.n	80067ae <_printf_i+0x1f6>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	6829      	ldr	r1, [r5, #0]
 8006668:	0606      	lsls	r6, r0, #24
 800666a:	f101 0304 	add.w	r3, r1, #4
 800666e:	d50a      	bpl.n	8006686 <_printf_i+0xce>
 8006670:	680e      	ldr	r6, [r1, #0]
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	2e00      	cmp	r6, #0
 8006676:	da03      	bge.n	8006680 <_printf_i+0xc8>
 8006678:	232d      	movs	r3, #45	; 0x2d
 800667a:	4276      	negs	r6, r6
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006680:	230a      	movs	r3, #10
 8006682:	485e      	ldr	r0, [pc, #376]	; (80067fc <_printf_i+0x244>)
 8006684:	e019      	b.n	80066ba <_printf_i+0x102>
 8006686:	680e      	ldr	r6, [r1, #0]
 8006688:	f010 0f40 	tst.w	r0, #64	; 0x40
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	bf18      	it	ne
 8006690:	b236      	sxthne	r6, r6
 8006692:	e7ef      	b.n	8006674 <_printf_i+0xbc>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	1d19      	adds	r1, r3, #4
 800669a:	6029      	str	r1, [r5, #0]
 800669c:	0601      	lsls	r1, r0, #24
 800669e:	d501      	bpl.n	80066a4 <_printf_i+0xec>
 80066a0:	681e      	ldr	r6, [r3, #0]
 80066a2:	e002      	b.n	80066aa <_printf_i+0xf2>
 80066a4:	0646      	lsls	r6, r0, #25
 80066a6:	d5fb      	bpl.n	80066a0 <_printf_i+0xe8>
 80066a8:	881e      	ldrh	r6, [r3, #0]
 80066aa:	2f6f      	cmp	r7, #111	; 0x6f
 80066ac:	bf0c      	ite	eq
 80066ae:	2308      	moveq	r3, #8
 80066b0:	230a      	movne	r3, #10
 80066b2:	4852      	ldr	r0, [pc, #328]	; (80067fc <_printf_i+0x244>)
 80066b4:	2100      	movs	r1, #0
 80066b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ba:	6865      	ldr	r5, [r4, #4]
 80066bc:	2d00      	cmp	r5, #0
 80066be:	bfa8      	it	ge
 80066c0:	6821      	ldrge	r1, [r4, #0]
 80066c2:	60a5      	str	r5, [r4, #8]
 80066c4:	bfa4      	itt	ge
 80066c6:	f021 0104 	bicge.w	r1, r1, #4
 80066ca:	6021      	strge	r1, [r4, #0]
 80066cc:	b90e      	cbnz	r6, 80066d2 <_printf_i+0x11a>
 80066ce:	2d00      	cmp	r5, #0
 80066d0:	d04d      	beq.n	800676e <_printf_i+0x1b6>
 80066d2:	4615      	mov	r5, r2
 80066d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80066d8:	fb03 6711 	mls	r7, r3, r1, r6
 80066dc:	5dc7      	ldrb	r7, [r0, r7]
 80066de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066e2:	4637      	mov	r7, r6
 80066e4:	42bb      	cmp	r3, r7
 80066e6:	460e      	mov	r6, r1
 80066e8:	d9f4      	bls.n	80066d4 <_printf_i+0x11c>
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d10b      	bne.n	8006706 <_printf_i+0x14e>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	07de      	lsls	r6, r3, #31
 80066f2:	d508      	bpl.n	8006706 <_printf_i+0x14e>
 80066f4:	6923      	ldr	r3, [r4, #16]
 80066f6:	6861      	ldr	r1, [r4, #4]
 80066f8:	4299      	cmp	r1, r3
 80066fa:	bfde      	ittt	le
 80066fc:	2330      	movle	r3, #48	; 0x30
 80066fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006702:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006706:	1b52      	subs	r2, r2, r5
 8006708:	6122      	str	r2, [r4, #16]
 800670a:	464b      	mov	r3, r9
 800670c:	4621      	mov	r1, r4
 800670e:	4640      	mov	r0, r8
 8006710:	f8cd a000 	str.w	sl, [sp]
 8006714:	aa03      	add	r2, sp, #12
 8006716:	f7ff fedf 	bl	80064d8 <_printf_common>
 800671a:	3001      	adds	r0, #1
 800671c:	d14c      	bne.n	80067b8 <_printf_i+0x200>
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	b004      	add	sp, #16
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	4834      	ldr	r0, [pc, #208]	; (80067fc <_printf_i+0x244>)
 800672a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800672e:	6829      	ldr	r1, [r5, #0]
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	f851 6b04 	ldr.w	r6, [r1], #4
 8006736:	6029      	str	r1, [r5, #0]
 8006738:	061d      	lsls	r5, r3, #24
 800673a:	d514      	bpl.n	8006766 <_printf_i+0x1ae>
 800673c:	07df      	lsls	r7, r3, #31
 800673e:	bf44      	itt	mi
 8006740:	f043 0320 	orrmi.w	r3, r3, #32
 8006744:	6023      	strmi	r3, [r4, #0]
 8006746:	b91e      	cbnz	r6, 8006750 <_printf_i+0x198>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	f023 0320 	bic.w	r3, r3, #32
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	2310      	movs	r3, #16
 8006752:	e7af      	b.n	80066b4 <_printf_i+0xfc>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	f043 0320 	orr.w	r3, r3, #32
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	2378      	movs	r3, #120	; 0x78
 800675e:	4828      	ldr	r0, [pc, #160]	; (8006800 <_printf_i+0x248>)
 8006760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006764:	e7e3      	b.n	800672e <_printf_i+0x176>
 8006766:	0659      	lsls	r1, r3, #25
 8006768:	bf48      	it	mi
 800676a:	b2b6      	uxthmi	r6, r6
 800676c:	e7e6      	b.n	800673c <_printf_i+0x184>
 800676e:	4615      	mov	r5, r2
 8006770:	e7bb      	b.n	80066ea <_printf_i+0x132>
 8006772:	682b      	ldr	r3, [r5, #0]
 8006774:	6826      	ldr	r6, [r4, #0]
 8006776:	1d18      	adds	r0, r3, #4
 8006778:	6961      	ldr	r1, [r4, #20]
 800677a:	6028      	str	r0, [r5, #0]
 800677c:	0635      	lsls	r5, r6, #24
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	d501      	bpl.n	8006786 <_printf_i+0x1ce>
 8006782:	6019      	str	r1, [r3, #0]
 8006784:	e002      	b.n	800678c <_printf_i+0x1d4>
 8006786:	0670      	lsls	r0, r6, #25
 8006788:	d5fb      	bpl.n	8006782 <_printf_i+0x1ca>
 800678a:	8019      	strh	r1, [r3, #0]
 800678c:	2300      	movs	r3, #0
 800678e:	4615      	mov	r5, r2
 8006790:	6123      	str	r3, [r4, #16]
 8006792:	e7ba      	b.n	800670a <_printf_i+0x152>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	2100      	movs	r1, #0
 8006798:	1d1a      	adds	r2, r3, #4
 800679a:	602a      	str	r2, [r5, #0]
 800679c:	681d      	ldr	r5, [r3, #0]
 800679e:	6862      	ldr	r2, [r4, #4]
 80067a0:	4628      	mov	r0, r5
 80067a2:	f000 f8d9 	bl	8006958 <memchr>
 80067a6:	b108      	cbz	r0, 80067ac <_printf_i+0x1f4>
 80067a8:	1b40      	subs	r0, r0, r5
 80067aa:	6060      	str	r0, [r4, #4]
 80067ac:	6863      	ldr	r3, [r4, #4]
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	2300      	movs	r3, #0
 80067b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b6:	e7a8      	b.n	800670a <_printf_i+0x152>
 80067b8:	462a      	mov	r2, r5
 80067ba:	4649      	mov	r1, r9
 80067bc:	4640      	mov	r0, r8
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	47d0      	blx	sl
 80067c2:	3001      	adds	r0, #1
 80067c4:	d0ab      	beq.n	800671e <_printf_i+0x166>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	079b      	lsls	r3, r3, #30
 80067ca:	d413      	bmi.n	80067f4 <_printf_i+0x23c>
 80067cc:	68e0      	ldr	r0, [r4, #12]
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	4298      	cmp	r0, r3
 80067d2:	bfb8      	it	lt
 80067d4:	4618      	movlt	r0, r3
 80067d6:	e7a4      	b.n	8006722 <_printf_i+0x16a>
 80067d8:	2301      	movs	r3, #1
 80067da:	4632      	mov	r2, r6
 80067dc:	4649      	mov	r1, r9
 80067de:	4640      	mov	r0, r8
 80067e0:	47d0      	blx	sl
 80067e2:	3001      	adds	r0, #1
 80067e4:	d09b      	beq.n	800671e <_printf_i+0x166>
 80067e6:	3501      	adds	r5, #1
 80067e8:	68e3      	ldr	r3, [r4, #12]
 80067ea:	9903      	ldr	r1, [sp, #12]
 80067ec:	1a5b      	subs	r3, r3, r1
 80067ee:	42ab      	cmp	r3, r5
 80067f0:	dcf2      	bgt.n	80067d8 <_printf_i+0x220>
 80067f2:	e7eb      	b.n	80067cc <_printf_i+0x214>
 80067f4:	2500      	movs	r5, #0
 80067f6:	f104 0619 	add.w	r6, r4, #25
 80067fa:	e7f5      	b.n	80067e8 <_printf_i+0x230>
 80067fc:	08006b61 	.word	0x08006b61
 8006800:	08006b72 	.word	0x08006b72

08006804 <_sbrk_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	2300      	movs	r3, #0
 8006808:	4d05      	ldr	r5, [pc, #20]	; (8006820 <_sbrk_r+0x1c>)
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	f7fa f990 	bl	8000b34 <_sbrk>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_sbrk_r+0x1a>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_sbrk_r+0x1a>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20000518 	.word	0x20000518

08006824 <__sread>:
 8006824:	b510      	push	{r4, lr}
 8006826:	460c      	mov	r4, r1
 8006828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682c:	f000 f8ae 	bl	800698c <_read_r>
 8006830:	2800      	cmp	r0, #0
 8006832:	bfab      	itete	ge
 8006834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006836:	89a3      	ldrhlt	r3, [r4, #12]
 8006838:	181b      	addge	r3, r3, r0
 800683a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800683e:	bfac      	ite	ge
 8006840:	6563      	strge	r3, [r4, #84]	; 0x54
 8006842:	81a3      	strhlt	r3, [r4, #12]
 8006844:	bd10      	pop	{r4, pc}

08006846 <__swrite>:
 8006846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684a:	461f      	mov	r7, r3
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	4605      	mov	r5, r0
 8006850:	05db      	lsls	r3, r3, #23
 8006852:	460c      	mov	r4, r1
 8006854:	4616      	mov	r6, r2
 8006856:	d505      	bpl.n	8006864 <__swrite+0x1e>
 8006858:	2302      	movs	r3, #2
 800685a:	2200      	movs	r2, #0
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	f000 f868 	bl	8006934 <_lseek_r>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	4632      	mov	r2, r6
 8006868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	4628      	mov	r0, r5
 8006870:	463b      	mov	r3, r7
 8006872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	f000 b817 	b.w	80068ac <_write_r>

0800687e <__sseek>:
 800687e:	b510      	push	{r4, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006886:	f000 f855 	bl	8006934 <_lseek_r>
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	bf15      	itete	ne
 8006890:	6560      	strne	r0, [r4, #84]	; 0x54
 8006892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800689a:	81a3      	strheq	r3, [r4, #12]
 800689c:	bf18      	it	ne
 800689e:	81a3      	strhne	r3, [r4, #12]
 80068a0:	bd10      	pop	{r4, pc}

080068a2 <__sclose>:
 80068a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a6:	f000 b813 	b.w	80068d0 <_close_r>
	...

080068ac <_write_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	2200      	movs	r2, #0
 80068b6:	4d05      	ldr	r5, [pc, #20]	; (80068cc <_write_r+0x20>)
 80068b8:	602a      	str	r2, [r5, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f7fa f8ed 	bl	8000a9a <_write>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_write_r+0x1e>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_write_r+0x1e>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20000518 	.word	0x20000518

080068d0 <_close_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	2300      	movs	r3, #0
 80068d4:	4d05      	ldr	r5, [pc, #20]	; (80068ec <_close_r+0x1c>)
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fa f8f9 	bl	8000ad2 <_close>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_close_r+0x1a>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_close_r+0x1a>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	20000518 	.word	0x20000518

080068f0 <_fstat_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	2300      	movs	r3, #0
 80068f4:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_fstat_r+0x20>)
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	f7fa f8f3 	bl	8000ae8 <_fstat>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	d102      	bne.n	800690c <_fstat_r+0x1c>
 8006906:	682b      	ldr	r3, [r5, #0]
 8006908:	b103      	cbz	r3, 800690c <_fstat_r+0x1c>
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	bd38      	pop	{r3, r4, r5, pc}
 800690e:	bf00      	nop
 8006910:	20000518 	.word	0x20000518

08006914 <_isatty_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	2300      	movs	r3, #0
 8006918:	4d05      	ldr	r5, [pc, #20]	; (8006930 <_isatty_r+0x1c>)
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	602b      	str	r3, [r5, #0]
 8006920:	f7fa f8f1 	bl	8000b06 <_isatty>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d102      	bne.n	800692e <_isatty_r+0x1a>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	b103      	cbz	r3, 800692e <_isatty_r+0x1a>
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	20000518 	.word	0x20000518

08006934 <_lseek_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	2200      	movs	r2, #0
 800693e:	4d05      	ldr	r5, [pc, #20]	; (8006954 <_lseek_r+0x20>)
 8006940:	602a      	str	r2, [r5, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	f7fa f8e9 	bl	8000b1a <_lseek>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_lseek_r+0x1e>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_lseek_r+0x1e>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	20000518 	.word	0x20000518

08006958 <memchr>:
 8006958:	4603      	mov	r3, r0
 800695a:	b510      	push	{r4, lr}
 800695c:	b2c9      	uxtb	r1, r1
 800695e:	4402      	add	r2, r0
 8006960:	4293      	cmp	r3, r2
 8006962:	4618      	mov	r0, r3
 8006964:	d101      	bne.n	800696a <memchr+0x12>
 8006966:	2000      	movs	r0, #0
 8006968:	e003      	b.n	8006972 <memchr+0x1a>
 800696a:	7804      	ldrb	r4, [r0, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	428c      	cmp	r4, r1
 8006970:	d1f6      	bne.n	8006960 <memchr+0x8>
 8006972:	bd10      	pop	{r4, pc}

08006974 <__malloc_lock>:
 8006974:	4801      	ldr	r0, [pc, #4]	; (800697c <__malloc_lock+0x8>)
 8006976:	f7ff bb13 	b.w	8005fa0 <__retarget_lock_acquire_recursive>
 800697a:	bf00      	nop
 800697c:	2000050c 	.word	0x2000050c

08006980 <__malloc_unlock>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__malloc_unlock+0x8>)
 8006982:	f7ff bb0e 	b.w	8005fa2 <__retarget_lock_release_recursive>
 8006986:	bf00      	nop
 8006988:	2000050c 	.word	0x2000050c

0800698c <_read_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	2200      	movs	r2, #0
 8006996:	4d05      	ldr	r5, [pc, #20]	; (80069ac <_read_r+0x20>)
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7fa f860 	bl	8000a60 <_read>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_read_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_read_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	20000518 	.word	0x20000518

080069b0 <_init>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr

080069bc <_fini>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr
